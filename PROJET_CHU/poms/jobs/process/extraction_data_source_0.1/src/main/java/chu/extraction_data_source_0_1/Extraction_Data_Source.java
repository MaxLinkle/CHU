// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package chu.extraction_data_source_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Extraction_Data_Source Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Extraction_Data_Source implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Extraction_Data_Source";
	private final String projectName = "CHU";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Extraction_Data_Source.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Extraction_Data_Source.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_36_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_36_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_45_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_45_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_55_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_55_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_66_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_66_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_78_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_78_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_91_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_91_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_21_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_28_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_36_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_45_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_55_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_66_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_78_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_91_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				chu.dim_actedeces_0_1.Dim_ActeDeces childJob_tRunJob_1 = new chu.dim_actedeces_0_1.Dim_ActeDeces();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_1.getErrorCode();
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
					java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1 != null)
							? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage())
							: ""));
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_3.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				chu.dim_diagnostic_0_1.Dim_Diagnostic childJob_tRunJob_3 = new chu.dim_diagnostic_0_1.Dim_Diagnostic();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_3.getErrorCode();
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3 != null)
							? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage())
							: ""));
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				paraList_tRunJob_6.add("--father_pid=" + pid);

				paraList_tRunJob_6.add("--root_pid=" + rootPid);

				paraList_tRunJob_6.add("--father_node=tRunJob_6");

				paraList_tRunJob_6.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_6.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_6 = null;

				chu.dim_etablissement_0_1.Dim_Etablissement childJob_tRunJob_6 = new chu.dim_etablissement_0_1.Dim_Etablissement();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_6) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
							.entrySet()) {
						dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
								talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
					}
					childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
				}

				childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;

				String[][] childReturn_tRunJob_6 = childJob_tRunJob_6
						.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));

				if (childJob_tRunJob_6.getErrorCode() == null) {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE",
							childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
				}
				if (childJob_tRunJob_6.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_6.getErrorCode();
				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
					java.lang.Exception ce_tRunJob_6 = childJob_tRunJob_6.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_6 != null)
							? (ce_tRunJob_6.getClass().getName() + ": " + ce_tRunJob_6.getMessage())
							: ""));
				}

				tos_count_tRunJob_6++;

				/**
				 * [tRunJob_6 main ] stop
				 */

				/**
				 * [tRunJob_6 process_data_begin ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_6 process_data_end ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_end ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());

				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				/**
				 * [tRunJob_10 begin ] stop
				 */

				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

				paraList_tRunJob_10.add("--father_pid=" + pid);

				paraList_tRunJob_10.add("--root_pid=" + rootPid);

				paraList_tRunJob_10.add("--father_node=tRunJob_10");

				paraList_tRunJob_10.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_10.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_10.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");

				java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_10 = null;

				chu.dim_patient_0_1.Dim_Patient childJob_tRunJob_10 = new chu.dim_patient_0_1.Dim_Patient();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_10) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
							.entrySet()) {
						dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
								talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
					}
					childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
				}

				childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;

				String[][] childReturn_tRunJob_10 = childJob_tRunJob_10
						.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));

				if (childJob_tRunJob_10.getErrorCode() == null) {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
				}
				if (childJob_tRunJob_10.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_10.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_10.getErrorCode();
				if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
					java.lang.Exception ce_tRunJob_10 = childJob_tRunJob_10.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_10 != null)
							? (ce_tRunJob_10.getClass().getName() + ": " + ce_tRunJob_10.getMessage())
							: ""));
				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */

				/**
				 * [tRunJob_10 process_data_begin ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_10 process_data_end ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_end ] stop
				 */

				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				/**
				 * [tRunJob_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_15 begin ] start
				 */

				ok_Hash.put("tRunJob_15", false);
				start_Hash.put("tRunJob_15", System.currentTimeMillis());

				currentComponent = "tRunJob_15";

				int tos_count_tRunJob_15 = 0;

				/**
				 * [tRunJob_15 begin ] stop
				 */

				/**
				 * [tRunJob_15 main ] start
				 */

				currentComponent = "tRunJob_15";

				java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();

				paraList_tRunJob_15.add("--father_pid=" + pid);

				paraList_tRunJob_15.add("--root_pid=" + rootPid);

				paraList_tRunJob_15.add("--father_node=tRunJob_15");

				paraList_tRunJob_15.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_15.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_15.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null) {
					paraList_tRunJob_15.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");

				java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_15 = null;

				chu.dim_professionnelsante_0_1.Dim_ProfessionnelSante childJob_tRunJob_15 = new chu.dim_professionnelsante_0_1.Dim_ProfessionnelSante();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_15) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
							.entrySet()) {
						dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
								talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
					}
					childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
				}

				childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;

				String[][] childReturn_tRunJob_15 = childJob_tRunJob_15
						.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));

				if (childJob_tRunJob_15.getErrorCode() == null) {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
				}
				if (childJob_tRunJob_15.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_15.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_15.getErrorCode();
				if (childJob_tRunJob_15.getErrorCode() != null || ("failure").equals(childJob_tRunJob_15.getStatus())) {
					java.lang.Exception ce_tRunJob_15 = childJob_tRunJob_15.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_15 != null)
							? (ce_tRunJob_15.getClass().getName() + ": " + ce_tRunJob_15.getMessage())
							: ""));
				}

				tos_count_tRunJob_15++;

				/**
				 * [tRunJob_15 main ] stop
				 */

				/**
				 * [tRunJob_15 process_data_begin ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_15 process_data_end ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 process_data_end ] stop
				 */

				/**
				 * [tRunJob_15 end ] start
				 */

				currentComponent = "tRunJob_15";

				ok_Hash.put("tRunJob_15", true);
				end_Hash.put("tRunJob_15", System.currentTimeMillis());

				/**
				 * [tRunJob_15 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_15 finally ] start
				 */

				currentComponent = "tRunJob_15";

				/**
				 * [tRunJob_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_21 begin ] start
				 */

				ok_Hash.put("tRunJob_21", false);
				start_Hash.put("tRunJob_21", System.currentTimeMillis());

				currentComponent = "tRunJob_21";

				int tos_count_tRunJob_21 = 0;

				/**
				 * [tRunJob_21 begin ] stop
				 */

				/**
				 * [tRunJob_21 main ] start
				 */

				currentComponent = "tRunJob_21";

				java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();

				paraList_tRunJob_21.add("--father_pid=" + pid);

				paraList_tRunJob_21.add("--root_pid=" + rootPid);

				paraList_tRunJob_21.add("--father_node=tRunJob_21");

				paraList_tRunJob_21.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_21.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_21.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_21.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_21 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_21 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_21".equals(tRunJobName_tRunJob_21) && childResumePath_tRunJob_21 != null) {
					paraList_tRunJob_21.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_21");

				java.util.Map<String, Object> parentContextMap_tRunJob_21 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_21 = null;

				chu.dim_rdv_0_1.Dim_RDV childJob_tRunJob_21 = new chu.dim_rdv_0_1.Dim_RDV();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_21 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_21) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_21 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_21 : talendDataSources_tRunJob_21
							.entrySet()) {
						dataSources_tRunJob_21.put(talendDataSourceEntry_tRunJob_21.getKey(),
								talendDataSourceEntry_tRunJob_21.getValue().getRawDataSource());
					}
					childJob_tRunJob_21.setDataSources(dataSources_tRunJob_21);
				}

				childJob_tRunJob_21.parentContextMap = parentContextMap_tRunJob_21;

				String[][] childReturn_tRunJob_21 = childJob_tRunJob_21
						.runJob((String[]) paraList_tRunJob_21.toArray(new String[paraList_tRunJob_21.size()]));

				if (childJob_tRunJob_21.getErrorCode() == null) {
					globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_21.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getErrorCode());
				}
				if (childJob_tRunJob_21.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_21.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_21.getErrorCode();
				if (childJob_tRunJob_21.getErrorCode() != null || ("failure").equals(childJob_tRunJob_21.getStatus())) {
					java.lang.Exception ce_tRunJob_21 = childJob_tRunJob_21.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_21 != null)
							? (ce_tRunJob_21.getClass().getName() + ": " + ce_tRunJob_21.getMessage())
							: ""));
				}

				tos_count_tRunJob_21++;

				/**
				 * [tRunJob_21 main ] stop
				 */

				/**
				 * [tRunJob_21 process_data_begin ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_21 process_data_end ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 process_data_end ] stop
				 */

				/**
				 * [tRunJob_21 end ] start
				 */

				currentComponent = "tRunJob_21";

				ok_Hash.put("tRunJob_21", true);
				end_Hash.put("tRunJob_21", System.currentTimeMillis());

				/**
				 * [tRunJob_21 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_21 finally ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_28 begin ] start
				 */

				ok_Hash.put("tRunJob_28", false);
				start_Hash.put("tRunJob_28", System.currentTimeMillis());

				currentComponent = "tRunJob_28";

				int tos_count_tRunJob_28 = 0;

				/**
				 * [tRunJob_28 begin ] stop
				 */

				/**
				 * [tRunJob_28 main ] start
				 */

				currentComponent = "tRunJob_28";

				java.util.List<String> paraList_tRunJob_28 = new java.util.ArrayList<String>();

				paraList_tRunJob_28.add("--father_pid=" + pid);

				paraList_tRunJob_28.add("--root_pid=" + rootPid);

				paraList_tRunJob_28.add("--father_node=tRunJob_28");

				paraList_tRunJob_28.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_28.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_28.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_28.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_28 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_28 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_28".equals(tRunJobName_tRunJob_28) && childResumePath_tRunJob_28 != null) {
					paraList_tRunJob_28.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_28.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_28");

				java.util.Map<String, Object> parentContextMap_tRunJob_28 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_28 = null;

				chu.dim_region_0_1.Dim_Region childJob_tRunJob_28 = new chu.dim_region_0_1.Dim_Region();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_28 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_28) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_28 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_28 : talendDataSources_tRunJob_28
							.entrySet()) {
						dataSources_tRunJob_28.put(talendDataSourceEntry_tRunJob_28.getKey(),
								talendDataSourceEntry_tRunJob_28.getValue().getRawDataSource());
					}
					childJob_tRunJob_28.setDataSources(dataSources_tRunJob_28);
				}

				childJob_tRunJob_28.parentContextMap = parentContextMap_tRunJob_28;

				String[][] childReturn_tRunJob_28 = childJob_tRunJob_28
						.runJob((String[]) paraList_tRunJob_28.toArray(new String[paraList_tRunJob_28.size()]));

				if (childJob_tRunJob_28.getErrorCode() == null) {
					globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_28.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getErrorCode());
				}
				if (childJob_tRunJob_28.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_28_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_28.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_28.getErrorCode();
				if (childJob_tRunJob_28.getErrorCode() != null || ("failure").equals(childJob_tRunJob_28.getStatus())) {
					java.lang.Exception ce_tRunJob_28 = childJob_tRunJob_28.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_28 != null)
							? (ce_tRunJob_28.getClass().getName() + ": " + ce_tRunJob_28.getMessage())
							: ""));
				}

				tos_count_tRunJob_28++;

				/**
				 * [tRunJob_28 main ] stop
				 */

				/**
				 * [tRunJob_28 process_data_begin ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_28 process_data_end ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 process_data_end ] stop
				 */

				/**
				 * [tRunJob_28 end ] start
				 */

				currentComponent = "tRunJob_28";

				ok_Hash.put("tRunJob_28", true);
				end_Hash.put("tRunJob_28", System.currentTimeMillis());

				/**
				 * [tRunJob_28 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_28 finally ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_36_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_36 begin ] start
				 */

				ok_Hash.put("tRunJob_36", false);
				start_Hash.put("tRunJob_36", System.currentTimeMillis());

				currentComponent = "tRunJob_36";

				int tos_count_tRunJob_36 = 0;

				/**
				 * [tRunJob_36 begin ] stop
				 */

				/**
				 * [tRunJob_36 main ] start
				 */

				currentComponent = "tRunJob_36";

				java.util.List<String> paraList_tRunJob_36 = new java.util.ArrayList<String>();

				paraList_tRunJob_36.add("--father_pid=" + pid);

				paraList_tRunJob_36.add("--root_pid=" + rootPid);

				paraList_tRunJob_36.add("--father_node=tRunJob_36");

				paraList_tRunJob_36.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_36.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_36.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_36.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_36 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_36 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_36".equals(tRunJobName_tRunJob_36) && childResumePath_tRunJob_36 != null) {
					paraList_tRunJob_36.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_36.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_36");

				java.util.Map<String, Object> parentContextMap_tRunJob_36 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_36 = null;

				chu.dim_visite_0_1.Dim_Visite childJob_tRunJob_36 = new chu.dim_visite_0_1.Dim_Visite();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_36 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_36) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_36 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_36 : talendDataSources_tRunJob_36
							.entrySet()) {
						dataSources_tRunJob_36.put(talendDataSourceEntry_tRunJob_36.getKey(),
								talendDataSourceEntry_tRunJob_36.getValue().getRawDataSource());
					}
					childJob_tRunJob_36.setDataSources(dataSources_tRunJob_36);
				}

				childJob_tRunJob_36.parentContextMap = parentContextMap_tRunJob_36;

				String[][] childReturn_tRunJob_36 = childJob_tRunJob_36
						.runJob((String[]) paraList_tRunJob_36.toArray(new String[paraList_tRunJob_36.size()]));

				if (childJob_tRunJob_36.getErrorCode() == null) {
					globalMap.put("tRunJob_36_CHILD_RETURN_CODE", childJob_tRunJob_36.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_36.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_36_CHILD_RETURN_CODE", childJob_tRunJob_36.getErrorCode());
				}
				if (childJob_tRunJob_36.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_36_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_36.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_36.getErrorCode();
				if (childJob_tRunJob_36.getErrorCode() != null || ("failure").equals(childJob_tRunJob_36.getStatus())) {
					java.lang.Exception ce_tRunJob_36 = childJob_tRunJob_36.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_36 != null)
							? (ce_tRunJob_36.getClass().getName() + ": " + ce_tRunJob_36.getMessage())
							: ""));
				}

				tos_count_tRunJob_36++;

				/**
				 * [tRunJob_36 main ] stop
				 */

				/**
				 * [tRunJob_36 process_data_begin ] start
				 */

				currentComponent = "tRunJob_36";

				/**
				 * [tRunJob_36 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_36 process_data_end ] start
				 */

				currentComponent = "tRunJob_36";

				/**
				 * [tRunJob_36 process_data_end ] stop
				 */

				/**
				 * [tRunJob_36 end ] start
				 */

				currentComponent = "tRunJob_36";

				ok_Hash.put("tRunJob_36", true);
				end_Hash.put("tRunJob_36", System.currentTimeMillis());

				/**
				 * [tRunJob_36 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_36 finally ] start
				 */

				currentComponent = "tRunJob_36";

				/**
				 * [tRunJob_36 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_36_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_45Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_45_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_45 begin ] start
				 */

				ok_Hash.put("tRunJob_45", false);
				start_Hash.put("tRunJob_45", System.currentTimeMillis());

				currentComponent = "tRunJob_45";

				int tos_count_tRunJob_45 = 0;

				/**
				 * [tRunJob_45 begin ] stop
				 */

				/**
				 * [tRunJob_45 main ] start
				 */

				currentComponent = "tRunJob_45";

				java.util.List<String> paraList_tRunJob_45 = new java.util.ArrayList<String>();

				paraList_tRunJob_45.add("--father_pid=" + pid);

				paraList_tRunJob_45.add("--root_pid=" + rootPid);

				paraList_tRunJob_45.add("--father_node=tRunJob_45");

				paraList_tRunJob_45.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_45.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_45.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_45.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_45 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_45 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_45".equals(tRunJobName_tRunJob_45) && childResumePath_tRunJob_45 != null) {
					paraList_tRunJob_45.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_45.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_45");

				java.util.Map<String, Object> parentContextMap_tRunJob_45 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_45 = null;

				chu.fact_consultation_0_1.Fact_Consultation childJob_tRunJob_45 = new chu.fact_consultation_0_1.Fact_Consultation();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_45 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_45) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_45 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_45 : talendDataSources_tRunJob_45
							.entrySet()) {
						dataSources_tRunJob_45.put(talendDataSourceEntry_tRunJob_45.getKey(),
								talendDataSourceEntry_tRunJob_45.getValue().getRawDataSource());
					}
					childJob_tRunJob_45.setDataSources(dataSources_tRunJob_45);
				}

				childJob_tRunJob_45.parentContextMap = parentContextMap_tRunJob_45;

				String[][] childReturn_tRunJob_45 = childJob_tRunJob_45
						.runJob((String[]) paraList_tRunJob_45.toArray(new String[paraList_tRunJob_45.size()]));

				if (childJob_tRunJob_45.getErrorCode() == null) {
					globalMap.put("tRunJob_45_CHILD_RETURN_CODE", childJob_tRunJob_45.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_45.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_45_CHILD_RETURN_CODE", childJob_tRunJob_45.getErrorCode());
				}
				if (childJob_tRunJob_45.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_45_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_45.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_45.getErrorCode();
				if (childJob_tRunJob_45.getErrorCode() != null || ("failure").equals(childJob_tRunJob_45.getStatus())) {
					java.lang.Exception ce_tRunJob_45 = childJob_tRunJob_45.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_45 != null)
							? (ce_tRunJob_45.getClass().getName() + ": " + ce_tRunJob_45.getMessage())
							: ""));
				}

				tos_count_tRunJob_45++;

				/**
				 * [tRunJob_45 main ] stop
				 */

				/**
				 * [tRunJob_45 process_data_begin ] start
				 */

				currentComponent = "tRunJob_45";

				/**
				 * [tRunJob_45 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_45 process_data_end ] start
				 */

				currentComponent = "tRunJob_45";

				/**
				 * [tRunJob_45 process_data_end ] stop
				 */

				/**
				 * [tRunJob_45 end ] start
				 */

				currentComponent = "tRunJob_45";

				ok_Hash.put("tRunJob_45", true);
				end_Hash.put("tRunJob_45", System.currentTimeMillis());

				/**
				 * [tRunJob_45 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_45 finally ] start
				 */

				currentComponent = "tRunJob_45";

				/**
				 * [tRunJob_45 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_45_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_55Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_55_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_55 begin ] start
				 */

				ok_Hash.put("tRunJob_55", false);
				start_Hash.put("tRunJob_55", System.currentTimeMillis());

				currentComponent = "tRunJob_55";

				int tos_count_tRunJob_55 = 0;

				/**
				 * [tRunJob_55 begin ] stop
				 */

				/**
				 * [tRunJob_55 main ] start
				 */

				currentComponent = "tRunJob_55";

				java.util.List<String> paraList_tRunJob_55 = new java.util.ArrayList<String>();

				paraList_tRunJob_55.add("--father_pid=" + pid);

				paraList_tRunJob_55.add("--root_pid=" + rootPid);

				paraList_tRunJob_55.add("--father_node=tRunJob_55");

				paraList_tRunJob_55.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_55.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_55.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_55.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_55 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_55 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_55".equals(tRunJobName_tRunJob_55) && childResumePath_tRunJob_55 != null) {
					paraList_tRunJob_55.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_55.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_55");

				java.util.Map<String, Object> parentContextMap_tRunJob_55 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_55 = null;

				chu.fact_deces_0_1.Fact_Deces childJob_tRunJob_55 = new chu.fact_deces_0_1.Fact_Deces();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_55 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_55) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_55 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_55 : talendDataSources_tRunJob_55
							.entrySet()) {
						dataSources_tRunJob_55.put(talendDataSourceEntry_tRunJob_55.getKey(),
								talendDataSourceEntry_tRunJob_55.getValue().getRawDataSource());
					}
					childJob_tRunJob_55.setDataSources(dataSources_tRunJob_55);
				}

				childJob_tRunJob_55.parentContextMap = parentContextMap_tRunJob_55;

				String[][] childReturn_tRunJob_55 = childJob_tRunJob_55
						.runJob((String[]) paraList_tRunJob_55.toArray(new String[paraList_tRunJob_55.size()]));

				if (childJob_tRunJob_55.getErrorCode() == null) {
					globalMap.put("tRunJob_55_CHILD_RETURN_CODE", childJob_tRunJob_55.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_55.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_55_CHILD_RETURN_CODE", childJob_tRunJob_55.getErrorCode());
				}
				if (childJob_tRunJob_55.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_55_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_55.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_55.getErrorCode();
				if (childJob_tRunJob_55.getErrorCode() != null || ("failure").equals(childJob_tRunJob_55.getStatus())) {
					java.lang.Exception ce_tRunJob_55 = childJob_tRunJob_55.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_55 != null)
							? (ce_tRunJob_55.getClass().getName() + ": " + ce_tRunJob_55.getMessage())
							: ""));
				}

				tos_count_tRunJob_55++;

				/**
				 * [tRunJob_55 main ] stop
				 */

				/**
				 * [tRunJob_55 process_data_begin ] start
				 */

				currentComponent = "tRunJob_55";

				/**
				 * [tRunJob_55 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_55 process_data_end ] start
				 */

				currentComponent = "tRunJob_55";

				/**
				 * [tRunJob_55 process_data_end ] stop
				 */

				/**
				 * [tRunJob_55 end ] start
				 */

				currentComponent = "tRunJob_55";

				ok_Hash.put("tRunJob_55", true);
				end_Hash.put("tRunJob_55", System.currentTimeMillis());

				/**
				 * [tRunJob_55 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_55 finally ] start
				 */

				currentComponent = "tRunJob_55";

				/**
				 * [tRunJob_55 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_55_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_66Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_66_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_66 begin ] start
				 */

				ok_Hash.put("tRunJob_66", false);
				start_Hash.put("tRunJob_66", System.currentTimeMillis());

				currentComponent = "tRunJob_66";

				int tos_count_tRunJob_66 = 0;

				/**
				 * [tRunJob_66 begin ] stop
				 */

				/**
				 * [tRunJob_66 main ] start
				 */

				currentComponent = "tRunJob_66";

				java.util.List<String> paraList_tRunJob_66 = new java.util.ArrayList<String>();

				paraList_tRunJob_66.add("--father_pid=" + pid);

				paraList_tRunJob_66.add("--root_pid=" + rootPid);

				paraList_tRunJob_66.add("--father_node=tRunJob_66");

				paraList_tRunJob_66.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_66.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_66.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_66.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_66 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_66 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_66".equals(tRunJobName_tRunJob_66) && childResumePath_tRunJob_66 != null) {
					paraList_tRunJob_66.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_66.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_66");

				java.util.Map<String, Object> parentContextMap_tRunJob_66 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_66 = null;

				chu.fact_hosco_0_1.Fact_HosCo childJob_tRunJob_66 = new chu.fact_hosco_0_1.Fact_HosCo();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_66 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_66) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_66 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_66 : talendDataSources_tRunJob_66
							.entrySet()) {
						dataSources_tRunJob_66.put(talendDataSourceEntry_tRunJob_66.getKey(),
								talendDataSourceEntry_tRunJob_66.getValue().getRawDataSource());
					}
					childJob_tRunJob_66.setDataSources(dataSources_tRunJob_66);
				}

				childJob_tRunJob_66.parentContextMap = parentContextMap_tRunJob_66;

				String[][] childReturn_tRunJob_66 = childJob_tRunJob_66
						.runJob((String[]) paraList_tRunJob_66.toArray(new String[paraList_tRunJob_66.size()]));

				if (childJob_tRunJob_66.getErrorCode() == null) {
					globalMap.put("tRunJob_66_CHILD_RETURN_CODE", childJob_tRunJob_66.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_66.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_66_CHILD_RETURN_CODE", childJob_tRunJob_66.getErrorCode());
				}
				if (childJob_tRunJob_66.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_66_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_66.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_66.getErrorCode();
				if (childJob_tRunJob_66.getErrorCode() != null || ("failure").equals(childJob_tRunJob_66.getStatus())) {
					java.lang.Exception ce_tRunJob_66 = childJob_tRunJob_66.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_66 != null)
							? (ce_tRunJob_66.getClass().getName() + ": " + ce_tRunJob_66.getMessage())
							: ""));
				}

				tos_count_tRunJob_66++;

				/**
				 * [tRunJob_66 main ] stop
				 */

				/**
				 * [tRunJob_66 process_data_begin ] start
				 */

				currentComponent = "tRunJob_66";

				/**
				 * [tRunJob_66 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_66 process_data_end ] start
				 */

				currentComponent = "tRunJob_66";

				/**
				 * [tRunJob_66 process_data_end ] stop
				 */

				/**
				 * [tRunJob_66 end ] start
				 */

				currentComponent = "tRunJob_66";

				ok_Hash.put("tRunJob_66", true);
				end_Hash.put("tRunJob_66", System.currentTimeMillis());

				/**
				 * [tRunJob_66 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_66 finally ] start
				 */

				currentComponent = "tRunJob_66";

				/**
				 * [tRunJob_66 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_66_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_78Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_78_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_78 begin ] start
				 */

				ok_Hash.put("tRunJob_78", false);
				start_Hash.put("tRunJob_78", System.currentTimeMillis());

				currentComponent = "tRunJob_78";

				int tos_count_tRunJob_78 = 0;

				/**
				 * [tRunJob_78 begin ] stop
				 */

				/**
				 * [tRunJob_78 main ] start
				 */

				currentComponent = "tRunJob_78";

				java.util.List<String> paraList_tRunJob_78 = new java.util.ArrayList<String>();

				paraList_tRunJob_78.add("--father_pid=" + pid);

				paraList_tRunJob_78.add("--root_pid=" + rootPid);

				paraList_tRunJob_78.add("--father_node=tRunJob_78");

				paraList_tRunJob_78.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_78.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_78.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_78.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_78 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_78 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_78".equals(tRunJobName_tRunJob_78) && childResumePath_tRunJob_78 != null) {
					paraList_tRunJob_78.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_78.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_78");

				java.util.Map<String, Object> parentContextMap_tRunJob_78 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_78 = null;

				chu.fact_hospitalisation_0_1.Fact_Hospitalisation childJob_tRunJob_78 = new chu.fact_hospitalisation_0_1.Fact_Hospitalisation();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_78 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_78) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_78 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_78 : talendDataSources_tRunJob_78
							.entrySet()) {
						dataSources_tRunJob_78.put(talendDataSourceEntry_tRunJob_78.getKey(),
								talendDataSourceEntry_tRunJob_78.getValue().getRawDataSource());
					}
					childJob_tRunJob_78.setDataSources(dataSources_tRunJob_78);
				}

				childJob_tRunJob_78.parentContextMap = parentContextMap_tRunJob_78;

				String[][] childReturn_tRunJob_78 = childJob_tRunJob_78
						.runJob((String[]) paraList_tRunJob_78.toArray(new String[paraList_tRunJob_78.size()]));

				if (childJob_tRunJob_78.getErrorCode() == null) {
					globalMap.put("tRunJob_78_CHILD_RETURN_CODE", childJob_tRunJob_78.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_78.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_78_CHILD_RETURN_CODE", childJob_tRunJob_78.getErrorCode());
				}
				if (childJob_tRunJob_78.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_78_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_78.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_78.getErrorCode();
				if (childJob_tRunJob_78.getErrorCode() != null || ("failure").equals(childJob_tRunJob_78.getStatus())) {
					java.lang.Exception ce_tRunJob_78 = childJob_tRunJob_78.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_78 != null)
							? (ce_tRunJob_78.getClass().getName() + ": " + ce_tRunJob_78.getMessage())
							: ""));
				}

				tos_count_tRunJob_78++;

				/**
				 * [tRunJob_78 main ] stop
				 */

				/**
				 * [tRunJob_78 process_data_begin ] start
				 */

				currentComponent = "tRunJob_78";

				/**
				 * [tRunJob_78 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_78 process_data_end ] start
				 */

				currentComponent = "tRunJob_78";

				/**
				 * [tRunJob_78 process_data_end ] stop
				 */

				/**
				 * [tRunJob_78 end ] start
				 */

				currentComponent = "tRunJob_78";

				ok_Hash.put("tRunJob_78", true);
				end_Hash.put("tRunJob_78", System.currentTimeMillis());

				/**
				 * [tRunJob_78 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_78 finally ] start
				 */

				currentComponent = "tRunJob_78";

				/**
				 * [tRunJob_78 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_78_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_91Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_91_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_91 begin ] start
				 */

				ok_Hash.put("tRunJob_91", false);
				start_Hash.put("tRunJob_91", System.currentTimeMillis());

				currentComponent = "tRunJob_91";

				int tos_count_tRunJob_91 = 0;

				/**
				 * [tRunJob_91 begin ] stop
				 */

				/**
				 * [tRunJob_91 main ] start
				 */

				currentComponent = "tRunJob_91";

				java.util.List<String> paraList_tRunJob_91 = new java.util.ArrayList<String>();

				paraList_tRunJob_91.add("--father_pid=" + pid);

				paraList_tRunJob_91.add("--root_pid=" + rootPid);

				paraList_tRunJob_91.add("--father_node=tRunJob_91");

				paraList_tRunJob_91.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_91.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_91.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_91.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_91 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_91 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_91".equals(tRunJobName_tRunJob_91) && childResumePath_tRunJob_91 != null) {
					paraList_tRunJob_91.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_91.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_91");

				java.util.Map<String, Object> parentContextMap_tRunJob_91 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_91 = null;

				chu.fact_satisfaction_0_1.Fact_Satisfaction childJob_tRunJob_91 = new chu.fact_satisfaction_0_1.Fact_Satisfaction();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_91 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_91) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_91 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_91 : talendDataSources_tRunJob_91
							.entrySet()) {
						dataSources_tRunJob_91.put(talendDataSourceEntry_tRunJob_91.getKey(),
								talendDataSourceEntry_tRunJob_91.getValue().getRawDataSource());
					}
					childJob_tRunJob_91.setDataSources(dataSources_tRunJob_91);
				}

				childJob_tRunJob_91.parentContextMap = parentContextMap_tRunJob_91;

				String[][] childReturn_tRunJob_91 = childJob_tRunJob_91
						.runJob((String[]) paraList_tRunJob_91.toArray(new String[paraList_tRunJob_91.size()]));

				if (childJob_tRunJob_91.getErrorCode() == null) {
					globalMap.put("tRunJob_91_CHILD_RETURN_CODE", childJob_tRunJob_91.getStatus() != null
							&& ("failure").equals(childJob_tRunJob_91.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_91_CHILD_RETURN_CODE", childJob_tRunJob_91.getErrorCode());
				}
				if (childJob_tRunJob_91.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_91_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_91.getExceptionStackTrace());
				}
				errorCode = childJob_tRunJob_91.getErrorCode();
				if (childJob_tRunJob_91.getErrorCode() != null || ("failure").equals(childJob_tRunJob_91.getStatus())) {
					java.lang.Exception ce_tRunJob_91 = childJob_tRunJob_91.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_91 != null)
							? (ce_tRunJob_91.getClass().getName() + ": " + ce_tRunJob_91.getMessage())
							: ""));
				}

				tos_count_tRunJob_91++;

				/**
				 * [tRunJob_91 main ] stop
				 */

				/**
				 * [tRunJob_91 process_data_begin ] start
				 */

				currentComponent = "tRunJob_91";

				/**
				 * [tRunJob_91 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_91 process_data_end ] start
				 */

				currentComponent = "tRunJob_91";

				/**
				 * [tRunJob_91 process_data_end ] stop
				 */

				/**
				 * [tRunJob_91 end ] start
				 */

				currentComponent = "tRunJob_91";

				ok_Hash.put("tRunJob_91", true);
				end_Hash.put("tRunJob_91", System.currentTimeMillis());

				/**
				 * [tRunJob_91 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_91 finally ] start
				 */

				currentComponent = "tRunJob_91";

				/**
				 * [tRunJob_91 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_91_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Extraction_Data_Source Extraction_Data_SourceClass = new Extraction_Data_Source();

		int exitCode = Extraction_Data_SourceClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Extraction_Data_Source.class.getClassLoader()
					.getResourceAsStream("chu/extraction_data_source_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Extraction_Data_Source.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRunJob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_1) {
			globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

			e_tRunJob_1.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_3) {
			globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

			e_tRunJob_3.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_6) {
			globalMap.put("tRunJob_6_SUBPROCESS_STATE", -1);

			e_tRunJob_6.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_10) {
			globalMap.put("tRunJob_10_SUBPROCESS_STATE", -1);

			e_tRunJob_10.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_15) {
			globalMap.put("tRunJob_15_SUBPROCESS_STATE", -1);

			e_tRunJob_15.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_21Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_21) {
			globalMap.put("tRunJob_21_SUBPROCESS_STATE", -1);

			e_tRunJob_21.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_28Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_28) {
			globalMap.put("tRunJob_28_SUBPROCESS_STATE", -1);

			e_tRunJob_28.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_36Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_36) {
			globalMap.put("tRunJob_36_SUBPROCESS_STATE", -1);

			e_tRunJob_36.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_45Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_45) {
			globalMap.put("tRunJob_45_SUBPROCESS_STATE", -1);

			e_tRunJob_45.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_55Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_55) {
			globalMap.put("tRunJob_55_SUBPROCESS_STATE", -1);

			e_tRunJob_55.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_66Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_66) {
			globalMap.put("tRunJob_66_SUBPROCESS_STATE", -1);

			e_tRunJob_66.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_78Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_78) {
			globalMap.put("tRunJob_78_SUBPROCESS_STATE", -1);

			e_tRunJob_78.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_91Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_91) {
			globalMap.put("tRunJob_91_SUBPROCESS_STATE", -1);

			e_tRunJob_91.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Extraction_Data_Source");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 111986 characters generated by Talend Open Studio for Big Data on the 12 mai
 * 2022 13:42:21 CEST
 ************************************************************************************************/