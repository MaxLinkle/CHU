// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package chu.fact_satisfaction_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Fact_Satisfaction Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Fact_Satisfaction implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(HDFS_Cluster_User != null){
				
					this.setProperty("HDFS_Cluster_User", HDFS_Cluster_User.toString());
				
			}
			
			if(HDFS_Cluster_hadoopConfSpecificJar != null){
				
					this.setProperty("HDFS_Cluster_hadoopConfSpecificJar", HDFS_Cluster_hadoopConfSpecificJar.toString());
				
			}
			
			if(HDFS_Cluster_NameNodeUri != null){
				
					this.setProperty("HDFS_Cluster_NameNodeUri", HDFS_Cluster_NameNodeUri.toString());
				
			}
			
		}

public String HDFS_Cluster_User;
public String getHDFS_Cluster_User(){
	return this.HDFS_Cluster_User;
}
public String HDFS_Cluster_hadoopConfSpecificJar;
public String getHDFS_Cluster_hadoopConfSpecificJar(){
	return this.HDFS_Cluster_hadoopConfSpecificJar;
}
public String HDFS_Cluster_NameNodeUri;
public String getHDFS_Cluster_NameNodeUri(){
	return this.HDFS_Cluster_NameNodeUri;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Fact_Satisfaction";
	private final String projectName = "CHU";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Fact_Satisfaction.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Fact_Satisfaction.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tHDFSConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHDFSConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHDFSOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_region_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHadoopConfManager_tHDFSConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHadoopConfManager_tHDFSConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHadoopConfManager_tHDFSOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHadoopConfManager_tHDFSOutput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHDFSConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHadoopConfManager_tHDFSConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHadoopConfManager_tHDFSOutput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tHDFSConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHDFSConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tHDFSConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHDFSConnection_1", false);
		start_Hash.put("tHDFSConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tHDFSConnection_1";

	
		int tos_count_tHDFSConnection_1 = 0;
		

	
	
	
		org.apache.hadoop.conf.Configuration conf_tHDFSConnection_1 = new org.apache.hadoop.conf.Configuration();
		conf_tHDFSConnection_1.set("fs.default.name", context.HDFS_Cluster_NameNodeUri);
			conf_tHDFSConnection_1.set("fs.default.name", context.HDFS_Cluster_NameNodeUri);
		
				conf_tHDFSConnection_1.set("dfs.client.use.datanode.hostname", "true");
	
	org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_tHDFSConnection_1);
	globalMap.put("conn_tHDFSConnection_1",conf_tHDFSConnection_1);

 



/**
 * [tHDFSConnection_1 begin ] stop
 */
	
	/**
	 * [tHDFSConnection_1 main ] start
	 */

	

	
	
	currentComponent="tHDFSConnection_1";

	

 


	tos_count_tHDFSConnection_1++;

/**
 * [tHDFSConnection_1 main ] stop
 */
	
	/**
	 * [tHDFSConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHDFSConnection_1";

	

 



/**
 * [tHDFSConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tHDFSConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHDFSConnection_1";

	

 



/**
 * [tHDFSConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tHDFSConnection_1 end ] start
	 */

	

	
	
	currentComponent="tHDFSConnection_1";

	

 

ok_Hash.put("tHDFSConnection_1", true);
end_Hash.put("tHDFSConnection_1", System.currentTimeMillis());




/**
 * [tHDFSConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHDFSConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputExcel_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHDFSConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tHDFSConnection_1";

	

 



/**
 * [tHDFSConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHDFSConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class satisfacStruct implements routines.system.IPersistableRow<satisfacStruct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public Integer IDRegion;

				public Integer getIDRegion () {
					return this.IDRegion;
				}
				
			    public String identifiant_organisation;

				public String getIdentifiant_organisation () {
					return this.identifiant_organisation;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
						this.IDRegion = readInteger(dis);
					
					this.identifiant_organisation = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.IDRegion,dos);
					
					// String
				
						writeString(this.identifiant_organisation,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDRegion="+String.valueOf(IDRegion));
		sb.append(",identifiant_organisation="+identifiant_organisation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(satisfacStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String identifiant_organisation;

				public String getIdentifiant_organisation () {
					return this.identifiant_organisation;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.identifiant_organisation = readString(dis);
					
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.identifiant_organisation,dos);
					
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("identifiant_organisation="+identifiant_organisation);
		sb.append(",region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class etablissementStruct implements routines.system.IPersistableRow<etablissementStruct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String identifiant_organisation;

				public String getIdentifiant_organisation () {
					return this.identifiant_organisation;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.identifiant_organisation = readString(dis);
					
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.identifiant_organisation,dos);
					
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("identifiant_organisation="+identifiant_organisation);
		sb.append(",region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(etablissementStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String finess;

				public String getFiness () {
					return this.finess;
				}
				
			    public String rs_finess;

				public String getRs_finess () {
					return this.rs_finess;
				}
				
			    public String finess_geo;

				public String getFiness_geo () {
					return this.finess_geo;
				}
				
			    public String rs_finess_geo;

				public String getRs_finess_geo () {
					return this.rs_finess_geo;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String participation;

				public String getParticipation () {
					return this.participation;
				}
				
			    public String Depot;

				public String getDepot () {
					return this.Depot;
				}
				
			    public Integer nb_rep_score_all_rea_ajust;

				public Integer getNb_rep_score_all_rea_ajust () {
					return this.nb_rep_score_all_rea_ajust;
				}
				
			    public Float score_all_rea_ajust;

				public Float getScore_all_rea_ajust () {
					return this.score_all_rea_ajust;
				}
				
			    public String classement;

				public String getClassement () {
					return this.classement;
				}
				
			    public String evolution;

				public String getEvolution () {
					return this.evolution;
				}
				
			    public Integer nb_rep_score_accueil_rea_ajust;

				public Integer getNb_rep_score_accueil_rea_ajust () {
					return this.nb_rep_score_accueil_rea_ajust;
				}
				
			    public Float score_accueil_rea_ajust;

				public Float getScore_accueil_rea_ajust () {
					return this.score_accueil_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECinf_rea_ajust;

				public Integer getNb_rep_score_PECinf_rea_ajust () {
					return this.nb_rep_score_PECinf_rea_ajust;
				}
				
			    public Float score_PECinf_rea_ajust;

				public Float getScore_PECinf_rea_ajust () {
					return this.score_PECinf_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECmed_rea_ajust;

				public Integer getNb_rep_score_PECmed_rea_ajust () {
					return this.nb_rep_score_PECmed_rea_ajust;
				}
				
			    public Float score_PECmed_rea_ajust;

				public Float getScore_PECmed_rea_ajust () {
					return this.score_PECmed_rea_ajust;
				}
				
			    public Integer nb_rep_score_chambre_rea_ajust;

				public Integer getNb_rep_score_chambre_rea_ajust () {
					return this.nb_rep_score_chambre_rea_ajust;
				}
				
			    public Float score_chambre_rea_ajust;

				public Float getScore_chambre_rea_ajust () {
					return this.score_chambre_rea_ajust;
				}
				
			    public Integer nb_rep_score_repas_rea_ajust;

				public Integer getNb_rep_score_repas_rea_ajust () {
					return this.nb_rep_score_repas_rea_ajust;
				}
				
			    public Float score_repas_rea_ajust;

				public Float getScore_repas_rea_ajust () {
					return this.score_repas_rea_ajust;
				}
				
			    public Integer nb_rep_score_sortie_rea_ajust;

				public Integer getNb_rep_score_sortie_rea_ajust () {
					return this.nb_rep_score_sortie_rea_ajust;
				}
				
			    public Float score_sortie_rea_ajust;

				public Float getScore_sortie_rea_ajust () {
					return this.score_sortie_rea_ajust;
				}
				
			    public String taux_reco_brut;

				public String getTaux_reco_brut () {
					return this.taux_reco_brut;
				}
				
			    public Integer nb_reco_brut;

				public Integer getNb_reco_brut () {
					return this.nb_reco_brut;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.finess = readString(dis);
					
					this.rs_finess = readString(dis);
					
					this.finess_geo = readString(dis);
					
					this.rs_finess_geo = readString(dis);
					
					this.region = readString(dis);
					
					this.participation = readString(dis);
					
					this.Depot = readString(dis);
					
						this.nb_rep_score_all_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_all_rea_ajust = null;
           				} else {
           			    	this.score_all_rea_ajust = dis.readFloat();
           				}
					
					this.classement = readString(dis);
					
					this.evolution = readString(dis);
					
						this.nb_rep_score_accueil_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_accueil_rea_ajust = null;
           				} else {
           			    	this.score_accueil_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECinf_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECinf_rea_ajust = null;
           				} else {
           			    	this.score_PECinf_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECmed_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECmed_rea_ajust = null;
           				} else {
           			    	this.score_PECmed_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_chambre_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_chambre_rea_ajust = null;
           				} else {
           			    	this.score_chambre_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_repas_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_repas_rea_ajust = null;
           				} else {
           			    	this.score_repas_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_sortie_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_sortie_rea_ajust = null;
           				} else {
           			    	this.score_sortie_rea_ajust = dis.readFloat();
           				}
					
					this.taux_reco_brut = readString(dis);
					
						this.nb_reco_brut = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.finess,dos);
					
					// String
				
						writeString(this.rs_finess,dos);
					
					// String
				
						writeString(this.finess_geo,dos);
					
					// String
				
						writeString(this.rs_finess_geo,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.participation,dos);
					
					// String
				
						writeString(this.Depot,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_all_rea_ajust,dos);
					
					// Float
				
						if(this.score_all_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_all_rea_ajust);
		            	}
					
					// String
				
						writeString(this.classement,dos);
					
					// String
				
						writeString(this.evolution,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_accueil_rea_ajust,dos);
					
					// Float
				
						if(this.score_accueil_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_accueil_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECinf_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECinf_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECinf_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECmed_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECmed_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECmed_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_chambre_rea_ajust,dos);
					
					// Float
				
						if(this.score_chambre_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_chambre_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_repas_rea_ajust,dos);
					
					// Float
				
						if(this.score_repas_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_repas_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_sortie_rea_ajust,dos);
					
					// Float
				
						if(this.score_sortie_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_sortie_rea_ajust);
		            	}
					
					// String
				
						writeString(this.taux_reco_brut,dos);
					
					// Integer
				
						writeInteger(this.nb_reco_brut,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("finess="+finess);
		sb.append(",rs_finess="+rs_finess);
		sb.append(",finess_geo="+finess_geo);
		sb.append(",rs_finess_geo="+rs_finess_geo);
		sb.append(",region="+region);
		sb.append(",participation="+participation);
		sb.append(",Depot="+Depot);
		sb.append(",nb_rep_score_all_rea_ajust="+String.valueOf(nb_rep_score_all_rea_ajust));
		sb.append(",score_all_rea_ajust="+String.valueOf(score_all_rea_ajust));
		sb.append(",classement="+classement);
		sb.append(",evolution="+evolution);
		sb.append(",nb_rep_score_accueil_rea_ajust="+String.valueOf(nb_rep_score_accueil_rea_ajust));
		sb.append(",score_accueil_rea_ajust="+String.valueOf(score_accueil_rea_ajust));
		sb.append(",nb_rep_score_PECinf_rea_ajust="+String.valueOf(nb_rep_score_PECinf_rea_ajust));
		sb.append(",score_PECinf_rea_ajust="+String.valueOf(score_PECinf_rea_ajust));
		sb.append(",nb_rep_score_PECmed_rea_ajust="+String.valueOf(nb_rep_score_PECmed_rea_ajust));
		sb.append(",score_PECmed_rea_ajust="+String.valueOf(score_PECmed_rea_ajust));
		sb.append(",nb_rep_score_chambre_rea_ajust="+String.valueOf(nb_rep_score_chambre_rea_ajust));
		sb.append(",score_chambre_rea_ajust="+String.valueOf(score_chambre_rea_ajust));
		sb.append(",nb_rep_score_repas_rea_ajust="+String.valueOf(nb_rep_score_repas_rea_ajust));
		sb.append(",score_repas_rea_ajust="+String.valueOf(score_repas_rea_ajust));
		sb.append(",nb_rep_score_sortie_rea_ajust="+String.valueOf(nb_rep_score_sortie_rea_ajust));
		sb.append(",score_sortie_rea_ajust="+String.valueOf(score_sortie_rea_ajust));
		sb.append(",taux_reco_brut="+taux_reco_brut);
		sb.append(",nb_reco_brut="+String.valueOf(nb_reco_brut));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_1Struct implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String finess;

				public String getFiness () {
					return this.finess;
				}
				
			    public String rs_finess;

				public String getRs_finess () {
					return this.rs_finess;
				}
				
			    public String finess_geo;

				public String getFiness_geo () {
					return this.finess_geo;
				}
				
			    public String rs_finess_geo;

				public String getRs_finess_geo () {
					return this.rs_finess_geo;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String participation;

				public String getParticipation () {
					return this.participation;
				}
				
			    public String Depot;

				public String getDepot () {
					return this.Depot;
				}
				
			    public Integer nb_rep_score_all_rea_ajust;

				public Integer getNb_rep_score_all_rea_ajust () {
					return this.nb_rep_score_all_rea_ajust;
				}
				
			    public Float score_all_rea_ajust;

				public Float getScore_all_rea_ajust () {
					return this.score_all_rea_ajust;
				}
				
			    public String classement;

				public String getClassement () {
					return this.classement;
				}
				
			    public String evolution;

				public String getEvolution () {
					return this.evolution;
				}
				
			    public Integer nb_rep_score_accueil_rea_ajust;

				public Integer getNb_rep_score_accueil_rea_ajust () {
					return this.nb_rep_score_accueil_rea_ajust;
				}
				
			    public Float score_accueil_rea_ajust;

				public Float getScore_accueil_rea_ajust () {
					return this.score_accueil_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECinf_rea_ajust;

				public Integer getNb_rep_score_PECinf_rea_ajust () {
					return this.nb_rep_score_PECinf_rea_ajust;
				}
				
			    public Float score_PECinf_rea_ajust;

				public Float getScore_PECinf_rea_ajust () {
					return this.score_PECinf_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECmed_rea_ajust;

				public Integer getNb_rep_score_PECmed_rea_ajust () {
					return this.nb_rep_score_PECmed_rea_ajust;
				}
				
			    public Float score_PECmed_rea_ajust;

				public Float getScore_PECmed_rea_ajust () {
					return this.score_PECmed_rea_ajust;
				}
				
			    public Integer nb_rep_score_chambre_rea_ajust;

				public Integer getNb_rep_score_chambre_rea_ajust () {
					return this.nb_rep_score_chambre_rea_ajust;
				}
				
			    public Float score_chambre_rea_ajust;

				public Float getScore_chambre_rea_ajust () {
					return this.score_chambre_rea_ajust;
				}
				
			    public Integer nb_rep_score_repas_rea_ajust;

				public Integer getNb_rep_score_repas_rea_ajust () {
					return this.nb_rep_score_repas_rea_ajust;
				}
				
			    public Float score_repas_rea_ajust;

				public Float getScore_repas_rea_ajust () {
					return this.score_repas_rea_ajust;
				}
				
			    public Integer nb_rep_score_sortie_rea_ajust;

				public Integer getNb_rep_score_sortie_rea_ajust () {
					return this.nb_rep_score_sortie_rea_ajust;
				}
				
			    public Float score_sortie_rea_ajust;

				public Float getScore_sortie_rea_ajust () {
					return this.score_sortie_rea_ajust;
				}
				
			    public String taux_reco_brut;

				public String getTaux_reco_brut () {
					return this.taux_reco_brut;
				}
				
			    public Integer nb_reco_brut;

				public Integer getNb_reco_brut () {
					return this.nb_reco_brut;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.finess = readString(dis);
					
					this.rs_finess = readString(dis);
					
					this.finess_geo = readString(dis);
					
					this.rs_finess_geo = readString(dis);
					
					this.region = readString(dis);
					
					this.participation = readString(dis);
					
					this.Depot = readString(dis);
					
						this.nb_rep_score_all_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_all_rea_ajust = null;
           				} else {
           			    	this.score_all_rea_ajust = dis.readFloat();
           				}
					
					this.classement = readString(dis);
					
					this.evolution = readString(dis);
					
						this.nb_rep_score_accueil_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_accueil_rea_ajust = null;
           				} else {
           			    	this.score_accueil_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECinf_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECinf_rea_ajust = null;
           				} else {
           			    	this.score_PECinf_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECmed_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECmed_rea_ajust = null;
           				} else {
           			    	this.score_PECmed_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_chambre_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_chambre_rea_ajust = null;
           				} else {
           			    	this.score_chambre_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_repas_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_repas_rea_ajust = null;
           				} else {
           			    	this.score_repas_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_sortie_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_sortie_rea_ajust = null;
           				} else {
           			    	this.score_sortie_rea_ajust = dis.readFloat();
           				}
					
					this.taux_reco_brut = readString(dis);
					
						this.nb_reco_brut = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.finess,dos);
					
					// String
				
						writeString(this.rs_finess,dos);
					
					// String
				
						writeString(this.finess_geo,dos);
					
					// String
				
						writeString(this.rs_finess_geo,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.participation,dos);
					
					// String
				
						writeString(this.Depot,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_all_rea_ajust,dos);
					
					// Float
				
						if(this.score_all_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_all_rea_ajust);
		            	}
					
					// String
				
						writeString(this.classement,dos);
					
					// String
				
						writeString(this.evolution,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_accueil_rea_ajust,dos);
					
					// Float
				
						if(this.score_accueil_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_accueil_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECinf_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECinf_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECinf_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECmed_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECmed_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECmed_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_chambre_rea_ajust,dos);
					
					// Float
				
						if(this.score_chambre_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_chambre_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_repas_rea_ajust,dos);
					
					// Float
				
						if(this.score_repas_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_repas_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_sortie_rea_ajust,dos);
					
					// Float
				
						if(this.score_sortie_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_sortie_rea_ajust);
		            	}
					
					// String
				
						writeString(this.taux_reco_brut,dos);
					
					// Integer
				
						writeInteger(this.nb_reco_brut,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("finess="+finess);
		sb.append(",rs_finess="+rs_finess);
		sb.append(",finess_geo="+finess_geo);
		sb.append(",rs_finess_geo="+rs_finess_geo);
		sb.append(",region="+region);
		sb.append(",participation="+participation);
		sb.append(",Depot="+Depot);
		sb.append(",nb_rep_score_all_rea_ajust="+String.valueOf(nb_rep_score_all_rea_ajust));
		sb.append(",score_all_rea_ajust="+String.valueOf(score_all_rea_ajust));
		sb.append(",classement="+classement);
		sb.append(",evolution="+evolution);
		sb.append(",nb_rep_score_accueil_rea_ajust="+String.valueOf(nb_rep_score_accueil_rea_ajust));
		sb.append(",score_accueil_rea_ajust="+String.valueOf(score_accueil_rea_ajust));
		sb.append(",nb_rep_score_PECinf_rea_ajust="+String.valueOf(nb_rep_score_PECinf_rea_ajust));
		sb.append(",score_PECinf_rea_ajust="+String.valueOf(score_PECinf_rea_ajust));
		sb.append(",nb_rep_score_PECmed_rea_ajust="+String.valueOf(nb_rep_score_PECmed_rea_ajust));
		sb.append(",score_PECmed_rea_ajust="+String.valueOf(score_PECmed_rea_ajust));
		sb.append(",nb_rep_score_chambre_rea_ajust="+String.valueOf(nb_rep_score_chambre_rea_ajust));
		sb.append(",score_chambre_rea_ajust="+String.valueOf(score_chambre_rea_ajust));
		sb.append(",nb_rep_score_repas_rea_ajust="+String.valueOf(nb_rep_score_repas_rea_ajust));
		sb.append(",score_repas_rea_ajust="+String.valueOf(score_repas_rea_ajust));
		sb.append(",nb_rep_score_sortie_rea_ajust="+String.valueOf(nb_rep_score_sortie_rea_ajust));
		sb.append(",score_sortie_rea_ajust="+String.valueOf(score_sortie_rea_ajust));
		sb.append(",taux_reco_brut="+taux_reco_brut);
		sb.append(",nb_reco_brut="+String.valueOf(nb_reco_brut));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);
		tFileInputDelimited_2Process(globalMap);

		row1Struct row1 = new row1Struct();
etablissementStruct etablissement = new etablissementStruct();
row8Struct row8 = new row8Struct();
satisfacStruct satisfac = new satisfacStruct();







	
	/**
	 * [tHDFSOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHDFSOutput_1", false);
		start_Hash.put("tHDFSOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHDFSOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"satisfac");
					}
				
		int tos_count_tHDFSOutput_1 = 0;
		

	


String username_tHDFSOutput_1 = "";
org.apache.hadoop.fs.FileSystem fs_tHDFSOutput_1 = null;
	org.apache.hadoop.conf.Configuration conf_tHDFSOutput_1 = new org.apache.hadoop.conf.Configuration();
	
	
		conf_tHDFSOutput_1.set("fs.default.name", context.HDFS_Cluster_NameNodeUri);
	
	        conf_tHDFSOutput_1.set("dfs.client.use.datanode.hostname", "true");
	        
       org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_tHDFSOutput_1);
		username_tHDFSOutput_1 = "cloudera";
		if(username_tHDFSOutput_1 == null || "".equals(username_tHDFSOutput_1)){
			fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(conf_tHDFSOutput_1);
		}else{
			System.setProperty("HADOOP_USER_NAME", username_tHDFSOutput_1);
			fs_tHDFSOutput_1 = org.apache.hadoop.fs.FileSystem.get(new java.net.URI(conf_tHDFSOutput_1.get("fs.default.name")),conf_tHDFSOutput_1,username_tHDFSOutput_1);
		}	
	

	
	org.apache.hadoop.fs.Path path_tHDFSOutput_1 = new org.apache.hadoop.fs.Path("/user/cloudera/CHU/Fact_Satisfaction/Fact_Satisfaction.txt");
	int nb_line_tHDFSOutput_1 = 0;
				
		org.apache.hadoop.fs.FSDataOutputStream fsDataOutputStream_tHDFSOutput_1 = null;
		
			fsDataOutputStream_tHDFSOutput_1 = fs_tHDFSOutput_1.create(path_tHDFSOutput_1, true);
		
		
			java.io.Writer outtHDFSOutput_1 = null;
			outtHDFSOutput_1=new java.io.BufferedWriter(new java.io.OutputStreamWriter(fsDataOutputStream_tHDFSOutput_1));
		

 



/**
 * [tHDFSOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<regionStruct> tHash_Lookup_region = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<regionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<regionStruct>) 
					globalMap.get( "tHash_Lookup_region" ))
					;					
					
	

regionStruct regionHashKey = new regionStruct();
regionStruct regionDefault = new regionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
satisfacStruct satisfac_tmp = new satisfacStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"etablissement");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String identifiant_organisation;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.identifiant_organisation == null) ? 0 : this.identifiant_organisation.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.identifiant_organisation == null) {
										if (other.identifiant_organisation != null) 
											return false;
								
									} else if (!this.identifiant_organisation.equals(other.identifiant_organisation))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String var1;
	String var2;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
etablissementStruct etablissement_tmp = new etablissementStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:zf4HaGjscke5sdTVrUyAiygDj0kXtI+QfJniig==");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Satisfaction_Patient/Satisfaction_2020/resultats-esatis48h-mco-open-data-2020.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1){
   			sheetList_tFileInputExcel_1.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
    	}
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 25;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "finess";

				row1.finess = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.finess = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "rs_finess";

				row1.rs_finess = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.rs_finess = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "finess_geo";

				row1.finess_geo = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.finess_geo = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "rs_finess_geo";

				row1.rs_finess_geo = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.rs_finess_geo = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "region";

				row1.region = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.region = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "participation";

				row1.participation = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.participation = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Depot";

				row1.Depot = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.Depot = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_all_rea_ajust";

				row1.nb_rep_score_all_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_all_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_all_rea_ajust";

				row1.score_all_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_all_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "classement";

				row1.classement = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.classement = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "evolution";

				row1.evolution = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.evolution = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_accueil_rea_ajust";

				row1.nb_rep_score_accueil_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_accueil_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_accueil_rea_ajust";

				row1.score_accueil_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_accueil_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_PECinf_rea_ajust";

				row1.nb_rep_score_PECinf_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_PECinf_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_PECinf_rea_ajust";

				row1.score_PECinf_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_PECinf_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_PECmed_rea_ajust";

				row1.nb_rep_score_PECmed_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_PECmed_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_PECmed_rea_ajust";

				row1.score_PECmed_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_PECmed_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_chambre_rea_ajust";

				row1.nb_rep_score_chambre_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_chambre_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_chambre_rea_ajust";

				row1.score_chambre_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_chambre_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_repas_rea_ajust";

				row1.nb_rep_score_repas_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_repas_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_repas_rea_ajust";

				row1.score_repas_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_repas_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_rep_score_sortie_rea_ajust";

				row1.nb_rep_score_sortie_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_rep_score_sortie_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "score_sortie_rea_ajust";

				row1.score_sortie_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.score_sortie_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "taux_reco_brut";

				row1.taux_reco_brut = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.taux_reco_brut = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "nb_reco_brut";

				row1.nb_reco_brut = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row1.nb_reco_brut = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row5HashKey.finess_etablissement_juridique = row1.finess ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.finess_etablissement_juridique = '" + row5HashKey.finess_etablissement_juridique + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = (row1.region=="PACA")?"PROVENCE ALPE COTE D'AZUR":row1.region ;
Var.var2 = StringHandling.UPCASE(StringHandling.CHANGE(TalendString.removeAccents(Var.var1), "-", " ")) ;// ###############################
        // ###############################
        // # Output tables

etablissement = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'etablissement'
// # Filter conditions 
if( 

Relational.NOT(Relational.ISNULL(row1.region))

 ) {
etablissement_tmp.identifiant_organisation = row5.identifiant_organisation ;
etablissement_tmp.region = Var.var2 ;
etablissement = etablissement_tmp;
} // closing filter/reject
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "etablissement"
if(etablissement != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"etablissement");
					}
					
row8 = null;			
if(etablissement.identifiant_organisation == null){
	finder_tUniqRow_2.identifiant_organisation = null;
}else{
	finder_tUniqRow_2.identifiant_organisation = etablissement.identifiant_organisation.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(etablissement.identifiant_organisation == null){
	new_tUniqRow_2.identifiant_organisation = null;
}else{
	new_tUniqRow_2.identifiant_organisation = etablissement.identifiant_organisation.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.identifiant_organisation = etablissement.identifiant_organisation;			row8.region = etablissement.region;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "region" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopregion = false;
       		  	    	
       		  	    	
 							regionStruct regionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    regionHashKey.region = row8.region ;
                        		    		

								
		                        	regionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_region.lookup( regionHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_region.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_region != null && tHash_Lookup_region.getCount(regionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'region' and it contains more one result from keys :  region.region = '" + regionHashKey.region + "'");
								} // G 071
							

							regionStruct region = null;
                    		  	 
							   
                    		  	 
	       		  	    	regionStruct fromLookup_region = null;
							region = regionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_region !=null && tHash_Lookup_region.hasNext()) { // G 099
								
							
								
								fromLookup_region = tHash_Lookup_region.next();

							
							
								} // G 099
							
							

							if(fromLookup_region != null) {
								region = fromLookup_region;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

satisfac = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'satisfac'
satisfac_tmp.IDRegion = region.IDRegion ;
satisfac_tmp.identifiant_organisation = row8.identifiant_organisation ;
satisfac = satisfac_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "satisfac"
if(satisfac != null) { 



	
	/**
	 * [tHDFSOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHDFSOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"satisfac");
					}
					

	
					StringBuilder sb_tHDFSOutput_1 = new StringBuilder();
					
					
								if(satisfac.IDRegion != null) {
							
									sb_tHDFSOutput_1.append(
										
											satisfac.IDRegion
										
									);
							
								}
												
								sb_tHDFSOutput_1.append(";");
							
								if(satisfac.identifiant_organisation != null) {
							
									sb_tHDFSOutput_1.append(
										
											satisfac.identifiant_organisation
										
									);
							
								}
							
					sb_tHDFSOutput_1.append("\n");
					
						outtHDFSOutput_1.write(sb_tHDFSOutput_1.toString());
					
				nb_line_tHDFSOutput_1++;
				

	
 


	tos_count_tHDFSOutput_1++;

/**
 * [tHDFSOutput_1 main ] stop
 */
	
	/**
	 * [tHDFSOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHDFSOutput_1";

	

 



/**
 * [tHDFSOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHDFSOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHDFSOutput_1";

	

 



/**
 * [tHDFSOutput_1 process_data_end ] stop
 */

} // End of branch "satisfac"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "etablissement"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"etablissement");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_region != null) {
						tHash_Lookup_region.endGet();
					}
					globalMap.remove( "tHash_Lookup_region" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tHDFSOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHDFSOutput_1";

	


		if(outtHDFSOutput_1!=null){
			outtHDFSOutput_1.close();
		}

	
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"satisfac");
			  	}
			  	
 

ok_Hash.put("tHDFSOutput_1", true);
end_Hash.put("tHDFSOutput_1", System.currentTimeMillis());




/**
 * [tHDFSOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_region"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tHDFSOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHDFSOutput_1";

	

 



/**
 * [tHDFSOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class regionStruct implements routines.system.IPersistableComparableLookupRow<regionStruct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int IDRegion;

				public int getIDRegion () {
					return this.IDRegion;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.region == null) ? 0 : this.region.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final regionStruct other = (regionStruct) obj;
		
						if (this.region == null) {
							if (other.region != null)
								return false;
						
						} else if (!this.region.equals(other.region))
						
							return false;
					

		return true;
    }

	public void copyDataTo(regionStruct other) {

		other.IDRegion = this.IDRegion;
	            other.region = this.region;
	            
	}

	public void copyKeysDataTo(regionStruct other) {

		other.region = this.region;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.IDRegion = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.IDRegion);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDRegion="+String.valueOf(IDRegion));
		sb.append(",region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(regionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.region, other.region);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class decesStruct implements routines.system.IPersistableRow<decesStruct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(decesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public String Prenoms;

				public String getPrenoms () {
					return this.Prenoms;
				}
				
			    public Character Sexe;

				public Character getSexe () {
					return this.Sexe;
				}
				
			    public java.util.Date Date_Naissance;

				public java.util.Date getDate_Naissance () {
					return this.Date_Naissance;
				}
				
			    public java.util.Date Date_Deces;

				public java.util.Date getDate_Deces () {
					return this.Date_Deces;
				}
				
			    public String Pays_Source_Naissance;

				public String getPays_Source_Naissance () {
					return this.Pays_Source_Naissance;
				}
				
			    public String Code_Source_Commune_Naissance;

				public String getCode_Source_Commune_Naissance () {
					return this.Code_Source_Commune_Naissance;
				}
				
			    public String Nom_Source_Commune_Naissance;

				public String getNom_Source_Commune_Naissance () {
					return this.Nom_Source_Commune_Naissance;
				}
				
			    public String Code_Actuel_Commune_Naissance;

				public String getCode_Actuel_Commune_Naissance () {
					return this.Code_Actuel_Commune_Naissance;
				}
				
			    public String Nom_Actuel_Commune_Naissance;

				public String getNom_Actuel_Commune_Naissance () {
					return this.Nom_Actuel_Commune_Naissance;
				}
				
			    public String Code_Actuel_Departement_Naissance;

				public String getCode_Actuel_Departement_Naissance () {
					return this.Code_Actuel_Departement_Naissance;
				}
				
			    public String Nom_Actuel_Departement_Naissance;

				public String getNom_Actuel_Departement_Naissance () {
					return this.Nom_Actuel_Departement_Naissance;
				}
				
			    public String Code_Actuel_Region_Naissance;

				public String getCode_Actuel_Region_Naissance () {
					return this.Code_Actuel_Region_Naissance;
				}
				
			    public String Nom_Actuel_Region_Naissance;

				public String getNom_Actuel_Region_Naissance () {
					return this.Nom_Actuel_Region_Naissance;
				}
				
			    public String Code_Source_Commune_Deces;

				public String getCode_Source_Commune_Deces () {
					return this.Code_Source_Commune_Deces;
				}
				
			    public String Code_Actuel_Commune_Deces;

				public String getCode_Actuel_Commune_Deces () {
					return this.Code_Actuel_Commune_Deces;
				}
				
			    public String Nom_Actuel_Commune_Deces;

				public String getNom_Actuel_Commune_Deces () {
					return this.Nom_Actuel_Commune_Deces;
				}
				
			    public String Code_Actuel_Departement_Deces;

				public String getCode_Actuel_Departement_Deces () {
					return this.Code_Actuel_Departement_Deces;
				}
				
			    public String Nom_Actuel_Departement_Deces;

				public String getNom_Actuel_Departement_Deces () {
					return this.Nom_Actuel_Departement_Deces;
				}
				
			    public String Code_Actuel_Region_Deces;

				public String getCode_Actuel_Region_Deces () {
					return this.Code_Actuel_Region_Deces;
				}
				
			    public String Nom_Actuel_Region_Deces;

				public String getNom_Actuel_Region_Deces () {
					return this.Nom_Actuel_Region_Deces;
				}
				
			    public String Numero_d_acte_du_deces;

				public String getNumero_d_acte_du_deces () {
					return this.Numero_d_acte_du_deces;
				}
				
			    public String Nom_du_fichier_source_INSEE;

				public String getNom_du_fichier_source_INSEE () {
					return this.Nom_du_fichier_source_INSEE;
				}
				
			    public Integer Age;

				public Integer getAge () {
					return this.Age;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.Nom = readString(dis);
					
					this.Prenoms = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Sexe = null;
           				} else {
           			    	this.Sexe = dis.readChar();
           				}
					
					this.Date_Naissance = readDate(dis);
					
					this.Date_Deces = readDate(dis);
					
					this.Pays_Source_Naissance = readString(dis);
					
					this.Code_Source_Commune_Naissance = readString(dis);
					
					this.Nom_Source_Commune_Naissance = readString(dis);
					
					this.Code_Actuel_Commune_Naissance = readString(dis);
					
					this.Nom_Actuel_Commune_Naissance = readString(dis);
					
					this.Code_Actuel_Departement_Naissance = readString(dis);
					
					this.Nom_Actuel_Departement_Naissance = readString(dis);
					
					this.Code_Actuel_Region_Naissance = readString(dis);
					
					this.Nom_Actuel_Region_Naissance = readString(dis);
					
					this.Code_Source_Commune_Deces = readString(dis);
					
					this.Code_Actuel_Commune_Deces = readString(dis);
					
					this.Nom_Actuel_Commune_Deces = readString(dis);
					
					this.Code_Actuel_Departement_Deces = readString(dis);
					
					this.Nom_Actuel_Departement_Deces = readString(dis);
					
					this.Code_Actuel_Region_Deces = readString(dis);
					
					this.Nom_Actuel_Region_Deces = readString(dis);
					
					this.Numero_d_acte_du_deces = readString(dis);
					
					this.Nom_du_fichier_source_INSEE = readString(dis);
					
						this.Age = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Nom,dos);
					
					// String
				
						writeString(this.Prenoms,dos);
					
					// Character
				
						if(this.Sexe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Sexe);
		            	}
					
					// java.util.Date
				
						writeDate(this.Date_Naissance,dos);
					
					// java.util.Date
				
						writeDate(this.Date_Deces,dos);
					
					// String
				
						writeString(this.Pays_Source_Naissance,dos);
					
					// String
				
						writeString(this.Code_Source_Commune_Naissance,dos);
					
					// String
				
						writeString(this.Nom_Source_Commune_Naissance,dos);
					
					// String
				
						writeString(this.Code_Actuel_Commune_Naissance,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Commune_Naissance,dos);
					
					// String
				
						writeString(this.Code_Actuel_Departement_Naissance,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Departement_Naissance,dos);
					
					// String
				
						writeString(this.Code_Actuel_Region_Naissance,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Region_Naissance,dos);
					
					// String
				
						writeString(this.Code_Source_Commune_Deces,dos);
					
					// String
				
						writeString(this.Code_Actuel_Commune_Deces,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Commune_Deces,dos);
					
					// String
				
						writeString(this.Code_Actuel_Departement_Deces,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Departement_Deces,dos);
					
					// String
				
						writeString(this.Code_Actuel_Region_Deces,dos);
					
					// String
				
						writeString(this.Nom_Actuel_Region_Deces,dos);
					
					// String
				
						writeString(this.Numero_d_acte_du_deces,dos);
					
					// String
				
						writeString(this.Nom_du_fichier_source_INSEE,dos);
					
					// Integer
				
						writeInteger(this.Age,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Nom="+Nom);
		sb.append(",Prenoms="+Prenoms);
		sb.append(",Sexe="+String.valueOf(Sexe));
		sb.append(",Date_Naissance="+String.valueOf(Date_Naissance));
		sb.append(",Date_Deces="+String.valueOf(Date_Deces));
		sb.append(",Pays_Source_Naissance="+Pays_Source_Naissance);
		sb.append(",Code_Source_Commune_Naissance="+Code_Source_Commune_Naissance);
		sb.append(",Nom_Source_Commune_Naissance="+Nom_Source_Commune_Naissance);
		sb.append(",Code_Actuel_Commune_Naissance="+Code_Actuel_Commune_Naissance);
		sb.append(",Nom_Actuel_Commune_Naissance="+Nom_Actuel_Commune_Naissance);
		sb.append(",Code_Actuel_Departement_Naissance="+Code_Actuel_Departement_Naissance);
		sb.append(",Nom_Actuel_Departement_Naissance="+Nom_Actuel_Departement_Naissance);
		sb.append(",Code_Actuel_Region_Naissance="+Code_Actuel_Region_Naissance);
		sb.append(",Nom_Actuel_Region_Naissance="+Nom_Actuel_Region_Naissance);
		sb.append(",Code_Source_Commune_Deces="+Code_Source_Commune_Deces);
		sb.append(",Code_Actuel_Commune_Deces="+Code_Actuel_Commune_Deces);
		sb.append(",Nom_Actuel_Commune_Deces="+Nom_Actuel_Commune_Deces);
		sb.append(",Code_Actuel_Departement_Deces="+Code_Actuel_Departement_Deces);
		sb.append(",Nom_Actuel_Departement_Deces="+Nom_Actuel_Departement_Deces);
		sb.append(",Code_Actuel_Region_Deces="+Code_Actuel_Region_Deces);
		sb.append(",Nom_Actuel_Region_Deces="+Nom_Actuel_Region_Deces);
		sb.append(",Numero_d_acte_du_deces="+Numero_d_acte_du_deces);
		sb.append(",Nom_du_fichier_source_INSEE="+Nom_du_fichier_source_INSEE);
		sb.append(",Age="+String.valueOf(Age));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class satisfactionStruct implements routines.system.IPersistableRow<satisfactionStruct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String region;

				public String getRegion () {
					return this.region;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.region = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.region,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("region="+region);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(satisfactionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];

	
			    public String finess;

				public String getFiness () {
					return this.finess;
				}
				
			    public String rs_finess;

				public String getRs_finess () {
					return this.rs_finess;
				}
				
			    public String finess_geo;

				public String getFiness_geo () {
					return this.finess_geo;
				}
				
			    public String rs_finess_geo;

				public String getRs_finess_geo () {
					return this.rs_finess_geo;
				}
				
			    public String region;

				public String getRegion () {
					return this.region;
				}
				
			    public String participation;

				public String getParticipation () {
					return this.participation;
				}
				
			    public String Depot;

				public String getDepot () {
					return this.Depot;
				}
				
			    public Integer nb_rep_score_all_rea_ajust;

				public Integer getNb_rep_score_all_rea_ajust () {
					return this.nb_rep_score_all_rea_ajust;
				}
				
			    public Float score_all_rea_ajust;

				public Float getScore_all_rea_ajust () {
					return this.score_all_rea_ajust;
				}
				
			    public String classement;

				public String getClassement () {
					return this.classement;
				}
				
			    public String evolution;

				public String getEvolution () {
					return this.evolution;
				}
				
			    public Integer nb_rep_score_accueil_rea_ajust;

				public Integer getNb_rep_score_accueil_rea_ajust () {
					return this.nb_rep_score_accueil_rea_ajust;
				}
				
			    public Float score_accueil_rea_ajust;

				public Float getScore_accueil_rea_ajust () {
					return this.score_accueil_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECinf_rea_ajust;

				public Integer getNb_rep_score_PECinf_rea_ajust () {
					return this.nb_rep_score_PECinf_rea_ajust;
				}
				
			    public Float score_PECinf_rea_ajust;

				public Float getScore_PECinf_rea_ajust () {
					return this.score_PECinf_rea_ajust;
				}
				
			    public Integer nb_rep_score_PECmed_rea_ajust;

				public Integer getNb_rep_score_PECmed_rea_ajust () {
					return this.nb_rep_score_PECmed_rea_ajust;
				}
				
			    public Float score_PECmed_rea_ajust;

				public Float getScore_PECmed_rea_ajust () {
					return this.score_PECmed_rea_ajust;
				}
				
			    public Integer nb_rep_score_chambre_rea_ajust;

				public Integer getNb_rep_score_chambre_rea_ajust () {
					return this.nb_rep_score_chambre_rea_ajust;
				}
				
			    public Float score_chambre_rea_ajust;

				public Float getScore_chambre_rea_ajust () {
					return this.score_chambre_rea_ajust;
				}
				
			    public Integer nb_rep_score_repas_rea_ajust;

				public Integer getNb_rep_score_repas_rea_ajust () {
					return this.nb_rep_score_repas_rea_ajust;
				}
				
			    public Float score_repas_rea_ajust;

				public Float getScore_repas_rea_ajust () {
					return this.score_repas_rea_ajust;
				}
				
			    public Integer nb_rep_score_sortie_rea_ajust;

				public Integer getNb_rep_score_sortie_rea_ajust () {
					return this.nb_rep_score_sortie_rea_ajust;
				}
				
			    public Float score_sortie_rea_ajust;

				public Float getScore_sortie_rea_ajust () {
					return this.score_sortie_rea_ajust;
				}
				
			    public String taux_reco_brut;

				public String getTaux_reco_brut () {
					return this.taux_reco_brut;
				}
				
			    public Integer nb_reco_brut;

				public Integer getNb_reco_brut () {
					return this.nb_reco_brut;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.finess = readString(dis);
					
					this.rs_finess = readString(dis);
					
					this.finess_geo = readString(dis);
					
					this.rs_finess_geo = readString(dis);
					
					this.region = readString(dis);
					
					this.participation = readString(dis);
					
					this.Depot = readString(dis);
					
						this.nb_rep_score_all_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_all_rea_ajust = null;
           				} else {
           			    	this.score_all_rea_ajust = dis.readFloat();
           				}
					
					this.classement = readString(dis);
					
					this.evolution = readString(dis);
					
						this.nb_rep_score_accueil_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_accueil_rea_ajust = null;
           				} else {
           			    	this.score_accueil_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECinf_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECinf_rea_ajust = null;
           				} else {
           			    	this.score_PECinf_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_PECmed_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_PECmed_rea_ajust = null;
           				} else {
           			    	this.score_PECmed_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_chambre_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_chambre_rea_ajust = null;
           				} else {
           			    	this.score_chambre_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_repas_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_repas_rea_ajust = null;
           				} else {
           			    	this.score_repas_rea_ajust = dis.readFloat();
           				}
					
						this.nb_rep_score_sortie_rea_ajust = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.score_sortie_rea_ajust = null;
           				} else {
           			    	this.score_sortie_rea_ajust = dis.readFloat();
           				}
					
					this.taux_reco_brut = readString(dis);
					
						this.nb_reco_brut = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.finess,dos);
					
					// String
				
						writeString(this.rs_finess,dos);
					
					// String
				
						writeString(this.finess_geo,dos);
					
					// String
				
						writeString(this.rs_finess_geo,dos);
					
					// String
				
						writeString(this.region,dos);
					
					// String
				
						writeString(this.participation,dos);
					
					// String
				
						writeString(this.Depot,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_all_rea_ajust,dos);
					
					// Float
				
						if(this.score_all_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_all_rea_ajust);
		            	}
					
					// String
				
						writeString(this.classement,dos);
					
					// String
				
						writeString(this.evolution,dos);
					
					// Integer
				
						writeInteger(this.nb_rep_score_accueil_rea_ajust,dos);
					
					// Float
				
						if(this.score_accueil_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_accueil_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECinf_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECinf_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECinf_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_PECmed_rea_ajust,dos);
					
					// Float
				
						if(this.score_PECmed_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_PECmed_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_chambre_rea_ajust,dos);
					
					// Float
				
						if(this.score_chambre_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_chambre_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_repas_rea_ajust,dos);
					
					// Float
				
						if(this.score_repas_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_repas_rea_ajust);
		            	}
					
					// Integer
				
						writeInteger(this.nb_rep_score_sortie_rea_ajust,dos);
					
					// Float
				
						if(this.score_sortie_rea_ajust == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.score_sortie_rea_ajust);
		            	}
					
					// String
				
						writeString(this.taux_reco_brut,dos);
					
					// Integer
				
						writeInteger(this.nb_reco_brut,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("finess="+finess);
		sb.append(",rs_finess="+rs_finess);
		sb.append(",finess_geo="+finess_geo);
		sb.append(",rs_finess_geo="+rs_finess_geo);
		sb.append(",region="+region);
		sb.append(",participation="+participation);
		sb.append(",Depot="+Depot);
		sb.append(",nb_rep_score_all_rea_ajust="+String.valueOf(nb_rep_score_all_rea_ajust));
		sb.append(",score_all_rea_ajust="+String.valueOf(score_all_rea_ajust));
		sb.append(",classement="+classement);
		sb.append(",evolution="+evolution);
		sb.append(",nb_rep_score_accueil_rea_ajust="+String.valueOf(nb_rep_score_accueil_rea_ajust));
		sb.append(",score_accueil_rea_ajust="+String.valueOf(score_accueil_rea_ajust));
		sb.append(",nb_rep_score_PECinf_rea_ajust="+String.valueOf(nb_rep_score_PECinf_rea_ajust));
		sb.append(",score_PECinf_rea_ajust="+String.valueOf(score_PECinf_rea_ajust));
		sb.append(",nb_rep_score_PECmed_rea_ajust="+String.valueOf(nb_rep_score_PECmed_rea_ajust));
		sb.append(",score_PECmed_rea_ajust="+String.valueOf(score_PECmed_rea_ajust));
		sb.append(",nb_rep_score_chambre_rea_ajust="+String.valueOf(nb_rep_score_chambre_rea_ajust));
		sb.append(",score_chambre_rea_ajust="+String.valueOf(score_chambre_rea_ajust));
		sb.append(",nb_rep_score_repas_rea_ajust="+String.valueOf(nb_rep_score_repas_rea_ajust));
		sb.append(",score_repas_rea_ajust="+String.valueOf(score_repas_rea_ajust));
		sb.append(",nb_rep_score_sortie_rea_ajust="+String.valueOf(nb_rep_score_sortie_rea_ajust));
		sb.append(",score_sortie_rea_ajust="+String.valueOf(score_sortie_rea_ajust));
		sb.append(",taux_reco_brut="+taux_reco_brut);
		sb.append(",nb_reco_brut="+String.valueOf(nb_reco_brut));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
decesStruct deces = new decesStruct();

		row3Struct row3 = new row3Struct();
satisfactionStruct satisfaction = new satisfactionStruct();

			row4Struct row4 = new row4Struct();
row6Struct row6 = new row6Struct();
regionStruct region = new regionStruct();






	
	/**
	 * [tAdvancedHash_region begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_region", false);
		start_Hash.put("tAdvancedHash_region", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_region";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"region");
					}
				
		int tos_count_tAdvancedHash_region = 0;
		

			   		// connection name:region
			   		// source node:tMap_4 - inputs:(row6) outputs:(region,region) | target node:tAdvancedHash_region - inputs:(region) outputs:()
			   		// linked node: tMap_5 - inputs:(row8,region) outputs:(satisfac)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_region = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<regionStruct> tHash_Lookup_region =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<regionStruct>getLookup(matchingModeEnum_region);
	   						   
		   	   	   globalMap.put("tHash_Lookup_region", tHash_Lookup_region);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_region begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	int var1;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
regionStruct region_tmp = new regionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String region;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.region == null) ? 0 : this.region.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.region == null) {
										if (other.region != null) 
											return false;
								
									} else if (!this.region.equals(other.region))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"deces","satisfaction");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */

	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
decesStruct deces_tmp = new decesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Sources_Deces/liste-des-personnes-decedees-en-france-2019.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Sources_Deces/liste-des-personnes-decedees-en-france-2019.csv", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row2 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row2 = new row2Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row2.Nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row2.Prenoms = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row2.Sexe = ParserUtils.parseTo_Character(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Sexe", "row2", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row2.Sexe = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row2.Date_Naissance = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_Naissance", "row2", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row2.Date_Naissance = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row2.Date_Deces = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Date_Deces", "row2", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row2.Date_Deces = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row2.Pays_Source_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row2.Code_Source_Commune_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row2.Nom_Source_Commune_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row2.Code_Actuel_Commune_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row2.Nom_Actuel_Commune_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row2.Code_Actuel_Departement_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row2.Nom_Actuel_Departement_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row2.Code_Actuel_Region_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row2.Nom_Actuel_Region_Naissance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row2.Code_Source_Commune_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row2.Code_Actuel_Commune_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row2.Nom_Actuel_Commune_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row2.Code_Actuel_Departement_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row2.Nom_Actuel_Departement_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row2.Code_Actuel_Region_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row2.Nom_Actuel_Region_Deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row2.Numero_d_acte_du_deces = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row2.Nom_du_fichier_source_INSEE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row2.Age = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Age", "row2", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row2.Age = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row2 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

deces = null;


// # Output table : 'deces'
deces_tmp.region = StringHandling.UPCASE(StringHandling.CHANGE(TalendString.removeAccents(row2.Nom_Actuel_Region_Deces), "-", " ")) ;
deces = deces_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "deces"
if(deces != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"deces");
						}
						
//////////
 

// for output
			row4 = new row4Struct();
								
			row4.region = deces.region;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
row6 = null;			
if(row4.region == null){
	finder_tUniqRow_1.region = null;
}else{
	finder_tUniqRow_1.region = row4.region.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row4.region == null){
	new_tUniqRow_1.region = null;
}else{
	new_tUniqRow_1.region = row4.region.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row6 == null){ 
	
	row6 = new row6Struct();
}row6.region = row4.region;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 = Numeric.sequence("ok", 1, 1) ;// ###############################
        // ###############################
        // # Output tables

region = null;


// # Output table : 'region'
// # Filter conditions 
if( 

(row6.region.equals("")==false)

 ) {
region_tmp.IDRegion = Var.var1 ;
region_tmp.region = row6.region ;
region = region_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "region"
if(region != null) { 



	
	/**
	 * [tAdvancedHash_region main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"region");
					}
					


			   
			   

					regionStruct region_HashRow = new regionStruct();
		   	   	   
				
				region_HashRow.IDRegion = region.IDRegion;
				
				region_HashRow.region = region.region;
				
			tHash_Lookup_region.put(region_HashRow);
			
            




 


	tos_count_tAdvancedHash_region++;

/**
 * [tAdvancedHash_region main ] stop
 */
	
	/**
	 * [tAdvancedHash_region process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

 



/**
 * [tAdvancedHash_region process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_region process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

 



/**
 * [tAdvancedHash_region process_data_end ] stop
 */

} // End of branch "region"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "deces"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Sources_Deces/liste-des-personnes-decedees-en-france-2019.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */




	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
satisfactionStruct satisfaction_tmp = new satisfactionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:l4KzXT9Tzi3cFuAbQtB2cCtXT120EYacxvv+8A==");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = "C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Satisfaction_Patient/Satisfaction_2020/resultats-esatis48h-mco-open-data-2020.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2){
   			sheetList_tFileInputExcel_2.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
    	}
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 25;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "finess";

				row3.finess = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.finess = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "rs_finess";

				row3.rs_finess = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.rs_finess = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "finess_geo";

				row3.finess_geo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.finess_geo = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "rs_finess_geo";

				row3.rs_finess_geo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.rs_finess_geo = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "region";

				row3.region = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.region = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "participation";

				row3.participation = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.participation = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Depot";

				row3.Depot = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.Depot = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_all_rea_ajust";

				row3.nb_rep_score_all_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_all_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_all_rea_ajust";

				row3.score_all_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_all_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "classement";

				row3.classement = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.classement = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "evolution";

				row3.evolution = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.evolution = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_accueil_rea_ajust";

				row3.nb_rep_score_accueil_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_accueil_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_accueil_rea_ajust";

				row3.score_accueil_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_accueil_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_PECinf_rea_ajust";

				row3.nb_rep_score_PECinf_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_PECinf_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_PECinf_rea_ajust";

				row3.score_PECinf_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_PECinf_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_PECmed_rea_ajust";

				row3.nb_rep_score_PECmed_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_PECmed_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_PECmed_rea_ajust";

				row3.score_PECmed_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_PECmed_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_chambre_rea_ajust";

				row3.nb_rep_score_chambre_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_chambre_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_chambre_rea_ajust";

				row3.score_chambre_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_chambre_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_repas_rea_ajust";

				row3.nb_rep_score_repas_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_repas_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_repas_rea_ajust";

				row3.score_repas_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_repas_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_rep_score_sortie_rea_ajust";

				row3.nb_rep_score_sortie_rea_ajust = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_rep_score_sortie_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "score_sortie_rea_ajust";

				row3.score_sortie_rea_ajust = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.score_sortie_rea_ajust = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "taux_reco_brut";

				row3.taux_reco_brut = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.taux_reco_brut = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "nb_reco_brut";

				row3.nb_reco_brut = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null, '.'==decimalChar_tFileInputExcel_2 ? null : decimalChar_tFileInputExcel_2));
			}else{
				row3.nb_reco_brut = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

satisfaction = null;


// # Output table : 'satisfaction'
// # Filter conditions 
if( 

("PACA".equals(row3.region)==false)

 ) {
satisfaction_tmp.region = StringHandling.UPCASE(StringHandling.CHANGE(TalendString.removeAccents(row3.region), "-", " ")) ;
satisfaction = satisfaction_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "satisfaction"
if(satisfaction != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"satisfaction");
						}
						
//////////
 

// for output
			row4 = new row4Struct();
								
			row4.region = satisfaction.region;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
row6 = null;			
if(row4.region == null){
	finder_tUniqRow_1.region = null;
}else{
	finder_tUniqRow_1.region = row4.region.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row4.region == null){
	new_tUniqRow_1.region = null;
}else{
	new_tUniqRow_1.region = row4.region.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row6 == null){ 
	
	row6 = new row6Struct();
}row6.region = row4.region;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 = Numeric.sequence("ok", 1, 1) ;// ###############################
        // ###############################
        // # Output tables

region = null;


// # Output table : 'region'
// # Filter conditions 
if( 

(row6.region.equals("")==false)

 ) {
region_tmp.IDRegion = Var.var1 ;
region_tmp.region = row6.region ;
region = region_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "region"
if(region != null) { 



	
	/**
	 * [tAdvancedHash_region main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"region");
					}
					


			   
			   

					regionStruct region_HashRow = new regionStruct();
		   	   	   
				
				region_HashRow.IDRegion = region.IDRegion;
				
				region_HashRow.region = region.region;
				
			tHash_Lookup_region.put(region_HashRow);
			
            




 


	tos_count_tAdvancedHash_region++;

/**
 * [tAdvancedHash_region main ] stop
 */
	
	/**
	 * [tAdvancedHash_region process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

 



/**
 * [tAdvancedHash_region process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_region process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

 



/**
 * [tAdvancedHash_region process_data_end ] stop
 */

} // End of branch "region"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "satisfaction"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */



	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"deces","satisfaction");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_region end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

tHash_Lookup_region.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"region");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_region", true);
end_Hash.put("tAdvancedHash_region", System.currentTimeMillis());




/**
 * [tAdvancedHash_region end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */



	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */



	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_region finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_region";

	

 



/**
 * [tAdvancedHash_region finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_CHU_Fact_Satisfaction = new byte[0];
    static byte[] commonByteArray_CHU_Fact_Satisfaction = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public String cedex;

				public String getCedex () {
					return this.cedex;
				}
				
			    public String code_commune;

				public String getCode_commune () {
					return this.code_commune;
				}
				
			    public String code_postal;

				public String getCode_postal () {
					return this.code_postal;
				}
				
			    public String commune;

				public String getCommune () {
					return this.commune;
				}
				
			    public String complement_destinataire;

				public String getComplement_destinataire () {
					return this.complement_destinataire;
				}
				
			    public String complement_point_geographique;

				public String getComplement_point_geographique () {
					return this.complement_point_geographique;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String enseigne_commerciale_site;

				public String getEnseigne_commerciale_site () {
					return this.enseigne_commerciale_site;
				}
				
			    public String finess_etablissement_juridique;

				public String getFiness_etablissement_juridique () {
					return this.finess_etablissement_juridique;
				}
				
			    public String finess_site;

				public String getFiness_site () {
					return this.finess_site;
				}
				
			    public String identifiant_organisation;

				public String getIdentifiant_organisation () {
					return this.identifiant_organisation;
				}
				
			    public String indice_repetition_voie;

				public String getIndice_repetition_voie () {
					return this.indice_repetition_voie;
				}
				
			    public String mention_distribution;

				public String getMention_distribution () {
					return this.mention_distribution;
				}
				
			    public String numero_voie;

				public String getNumero_voie () {
					return this.numero_voie;
				}
				
			    public String pays;

				public String getPays () {
					return this.pays;
				}
				
			    public String raison_sociale_site;

				public String getRaison_sociale_site () {
					return this.raison_sociale_site;
				}
				
			    public String siren_site;

				public String getSiren_site () {
					return this.siren_site;
				}
				
			    public String siret_site;

				public String getSiret_site () {
					return this.siret_site;
				}
				
			    public String telecopie;

				public String getTelecopie () {
					return this.telecopie;
				}
				
			    public String telephone;

				public String getTelephone () {
					return this.telephone;
				}
				
			    public String telephone_2;

				public String getTelephone_2 () {
					return this.telephone_2;
				}
				
			    public String type_voie;

				public String getType_voie () {
					return this.type_voie;
				}
				
			    public String voie;

				public String getVoie () {
					return this.voie;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.finess_etablissement_juridique == null) ? 0 : this.finess_etablissement_juridique.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.finess_etablissement_juridique == null) {
							if (other.finess_etablissement_juridique != null)
								return false;
						
						} else if (!this.finess_etablissement_juridique.equals(other.finess_etablissement_juridique))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.adresse = this.adresse;
	            other.cedex = this.cedex;
	            other.code_commune = this.code_commune;
	            other.code_postal = this.code_postal;
	            other.commune = this.commune;
	            other.complement_destinataire = this.complement_destinataire;
	            other.complement_point_geographique = this.complement_point_geographique;
	            other.email = this.email;
	            other.enseigne_commerciale_site = this.enseigne_commerciale_site;
	            other.finess_etablissement_juridique = this.finess_etablissement_juridique;
	            other.finess_site = this.finess_site;
	            other.identifiant_organisation = this.identifiant_organisation;
	            other.indice_repetition_voie = this.indice_repetition_voie;
	            other.mention_distribution = this.mention_distribution;
	            other.numero_voie = this.numero_voie;
	            other.pays = this.pays;
	            other.raison_sociale_site = this.raison_sociale_site;
	            other.siren_site = this.siren_site;
	            other.siret_site = this.siret_site;
	            other.telecopie = this.telecopie;
	            other.telephone = this.telephone;
	            other.telephone_2 = this.telephone_2;
	            other.type_voie = this.type_voie;
	            other.voie = this.voie;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.finess_etablissement_juridique = this.finess_etablissement_juridique;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_CHU_Fact_Satisfaction.length) {
				if(length < 1024 && commonByteArray_CHU_Fact_Satisfaction.length == 0) {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[1024];
				} else {
   					commonByteArray_CHU_Fact_Satisfaction = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_CHU_Fact_Satisfaction, 0, length);
			strReturn = new String(commonByteArray_CHU_Fact_Satisfaction, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_CHU_Fact_Satisfaction) {

        	try {

        		int length = 0;
		
					this.finess_etablissement_juridique = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.finess_etablissement_juridique,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adresse = readString(dis,ois);
					
						this.cedex = readString(dis,ois);
					
						this.code_commune = readString(dis,ois);
					
						this.code_postal = readString(dis,ois);
					
						this.commune = readString(dis,ois);
					
						this.complement_destinataire = readString(dis,ois);
					
						this.complement_point_geographique = readString(dis,ois);
					
						this.email = readString(dis,ois);
					
						this.enseigne_commerciale_site = readString(dis,ois);
					
						this.finess_site = readString(dis,ois);
					
						this.identifiant_organisation = readString(dis,ois);
					
						this.indice_repetition_voie = readString(dis,ois);
					
						this.mention_distribution = readString(dis,ois);
					
						this.numero_voie = readString(dis,ois);
					
						this.pays = readString(dis,ois);
					
						this.raison_sociale_site = readString(dis,ois);
					
						this.siren_site = readString(dis,ois);
					
						this.siret_site = readString(dis,ois);
					
						this.telecopie = readString(dis,ois);
					
						this.telephone = readString(dis,ois);
					
						this.telephone_2 = readString(dis,ois);
					
						this.type_voie = readString(dis,ois);
					
						this.voie = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adresse, dos, oos);
					
						writeString(this.cedex, dos, oos);
					
						writeString(this.code_commune, dos, oos);
					
						writeString(this.code_postal, dos, oos);
					
						writeString(this.commune, dos, oos);
					
						writeString(this.complement_destinataire, dos, oos);
					
						writeString(this.complement_point_geographique, dos, oos);
					
						writeString(this.email, dos, oos);
					
						writeString(this.enseigne_commerciale_site, dos, oos);
					
						writeString(this.finess_site, dos, oos);
					
						writeString(this.identifiant_organisation, dos, oos);
					
						writeString(this.indice_repetition_voie, dos, oos);
					
						writeString(this.mention_distribution, dos, oos);
					
						writeString(this.numero_voie, dos, oos);
					
						writeString(this.pays, dos, oos);
					
						writeString(this.raison_sociale_site, dos, oos);
					
						writeString(this.siren_site, dos, oos);
					
						writeString(this.siret_site, dos, oos);
					
						writeString(this.telecopie, dos, oos);
					
						writeString(this.telephone, dos, oos);
					
						writeString(this.telephone_2, dos, oos);
					
						writeString(this.type_voie, dos, oos);
					
						writeString(this.voie, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("adresse="+adresse);
		sb.append(",cedex="+cedex);
		sb.append(",code_commune="+code_commune);
		sb.append(",code_postal="+code_postal);
		sb.append(",commune="+commune);
		sb.append(",complement_destinataire="+complement_destinataire);
		sb.append(",complement_point_geographique="+complement_point_geographique);
		sb.append(",email="+email);
		sb.append(",enseigne_commerciale_site="+enseigne_commerciale_site);
		sb.append(",finess_etablissement_juridique="+finess_etablissement_juridique);
		sb.append(",finess_site="+finess_site);
		sb.append(",identifiant_organisation="+identifiant_organisation);
		sb.append(",indice_repetition_voie="+indice_repetition_voie);
		sb.append(",mention_distribution="+mention_distribution);
		sb.append(",numero_voie="+numero_voie);
		sb.append(",pays="+pays);
		sb.append(",raison_sociale_site="+raison_sociale_site);
		sb.append(",siren_site="+siren_site);
		sb.append(",siret_site="+siret_site);
		sb.append(",telecopie="+telecopie);
		sb.append(",telephone="+telephone);
		sb.append(",telephone_2="+telephone_2);
		sb.append(",type_voie="+type_voie);
		sb.append(",voie="+voie);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.finess_etablissement_juridique, other.finess_etablissement_juridique);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputExcel_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row5) outputs:(etablissement)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = "C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Bdd_Gestion_des_professionnels/etablissement_sante.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited("C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Bdd_Gestion_des_professionnels/etablissement_sante.csv", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row5 = null;			
									
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row5.adresse = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row5.cedex = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row5.code_commune = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row5.code_postal = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row5.commune = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row5.complement_destinataire = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row5.complement_point_geographique = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row5.email = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row5.enseigne_commerciale_site = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row5.finess_etablissement_juridique = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row5.finess_site = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row5.identifiant_organisation = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row5.indice_repetition_voie = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row5.mention_distribution = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 14;
					
							row5.numero_voie = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 15;
					
							row5.pays = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 16;
					
							row5.raison_sociale_site = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 17;
					
							row5.siren_site = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 18;
					
							row5.siret_site = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 19;
					
							row5.telecopie = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 20;
					
							row5.telephone = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 21;
					
							row5.telephone_2 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 22;
					
							row5.type_voie = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 23;
					
							row5.voie = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.adresse = row5.adresse;
				
				row5_HashRow.cedex = row5.cedex;
				
				row5_HashRow.code_commune = row5.code_commune;
				
				row5_HashRow.code_postal = row5.code_postal;
				
				row5_HashRow.commune = row5.commune;
				
				row5_HashRow.complement_destinataire = row5.complement_destinataire;
				
				row5_HashRow.complement_point_geographique = row5.complement_point_geographique;
				
				row5_HashRow.email = row5.email;
				
				row5_HashRow.enseigne_commerciale_site = row5.enseigne_commerciale_site;
				
				row5_HashRow.finess_etablissement_juridique = row5.finess_etablissement_juridique;
				
				row5_HashRow.finess_site = row5.finess_site;
				
				row5_HashRow.identifiant_organisation = row5.identifiant_organisation;
				
				row5_HashRow.indice_repetition_voie = row5.indice_repetition_voie;
				
				row5_HashRow.mention_distribution = row5.mention_distribution;
				
				row5_HashRow.numero_voie = row5.numero_voie;
				
				row5_HashRow.pays = row5.pays;
				
				row5_HashRow.raison_sociale_site = row5.raison_sociale_site;
				
				row5_HashRow.siren_site = row5.siren_site;
				
				row5_HashRow.siret_site = row5.siret_site;
				
				row5_HashRow.telecopie = row5.telecopie;
				
				row5_HashRow.telephone = row5.telephone;
				
				row5_HashRow.telephone_2 = row5.telephone_2;
				
				row5_HashRow.type_voie = row5.type_voie;
				
				row5_HashRow.voie = row5.voie;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)("C:/Users/Administrateur.WIN-T87HKARVT4F/Documents/Bdd_Gestion_des_professionnels/etablissement_sante.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tHadoopConfManager_tHDFSConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHadoopConfManager_tHDFSConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHadoopConfManager_tHDFSConnection_1", false);
		start_Hash.put("tHadoopConfManager_tHDFSConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	
		int tos_count_tHadoopConfManager_tHDFSConnection_1 = 0;
		



String libPath_tHadoopConfManager_tHDFSConnection_1 = "";


class DealJobLibrary_tHadoopConfManager_tHDFSConnection_1 {

    public String getConfJarName(String confLib, String extraId) {
        String confJarName = confLib;
        if (extraId != null && extraId.length() > 0) {
            String jarName = confLib.substring(0, confLib.lastIndexOf("."));
            String jarExt = confLib.substring(confLib.lastIndexOf("."));
            confJarName = jarName + "_" + extraId + jarExt;
        }
        return confJarName;
    }

    public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
        String classPathLine = "";
        String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
        if (isNeedAddLibsPath( crcMapPath)) {
            java.util.Map<String, String> crcMap = null;
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath));
            crcMap = (java.util.Map<String, String>) ois.readObject();
            ois.close();
            classPathLine = addLibsPath(originalClassPathLine, crcMap);
        } else {
            classPathLine = originalClassPathLine;
        }
        return classPathLine;
    }

    private boolean isNeedAddLibsPath(String crcMapPath) {
        if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
            return false;
        }
        return true;
    }


    private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
        for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
            line = adaptLibPaths(line, entry);
        }
        return line;
    }

    private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
        String jarName = entry.getValue();
        String crc = entry.getKey();
        String libStringFinder = "../lib/" + jarName;
        if (line.contains(libStringFinder)) {
            line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
        } else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
            line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
        } else if (line.contains(";" + jarName + ";")) {
            line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
        }
        return line;
    }

}

DealJobLibrary_tHadoopConfManager_tHDFSConnection_1 dealJobLibrary = new DealJobLibrary_tHadoopConfManager_tHDFSConnection_1();
String confJarName = dealJobLibrary.getConfJarName("hadoop-conf-CHU_Cluster.jar", this.contextStr);

    libPath_tHadoopConfManager_tHDFSConnection_1 = new java.io.File("C:/TOS_BD-20200219_1130-V7.3.1/workspace/CHU/temp/lib/" + confJarName).getAbsolutePath();
libPath_tHadoopConfManager_tHDFSConnection_1 = dealJobLibrary.replaceJarPathsFromCrcMap(libPath_tHadoopConfManager_tHDFSConnection_1);

java.net.URLClassLoader currentLoadertHadoopConfManager_tHDFSConnection_1 = (java.net.URLClassLoader) Thread.currentThread().getContextClassLoader();
java.lang.reflect.Method method_tHadoopConfManager_tHDFSConnection_1 = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
method_tHadoopConfManager_tHDFSConnection_1.setAccessible(true);
method_tHadoopConfManager_tHDFSConnection_1.invoke(currentLoadertHadoopConfManager_tHDFSConnection_1, new Object[] { new java.io.File(libPath_tHadoopConfManager_tHDFSConnection_1).toURL() });


 



/**
 * [tHadoopConfManager_tHDFSConnection_1 begin ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 main ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	

 


	tos_count_tHadoopConfManager_tHDFSConnection_1++;

/**
 * [tHadoopConfManager_tHDFSConnection_1 main ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	

 



/**
 * [tHadoopConfManager_tHDFSConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	

 



/**
 * [tHadoopConfManager_tHDFSConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 end ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	

 

ok_Hash.put("tHadoopConfManager_tHDFSConnection_1", true);
end_Hash.put("tHadoopConfManager_tHDFSConnection_1", System.currentTimeMillis());




/**
 * [tHadoopConfManager_tHDFSConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHadoopConfManager_tHDFSConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSConnection_1";

	

 



/**
 * [tHadoopConfManager_tHDFSConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHadoopConfManager_tHDFSConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tHadoopConfManager_tHDFSOutput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHadoopConfManager_tHDFSOutput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHadoopConfManager_tHDFSOutput_1", false);
		start_Hash.put("tHadoopConfManager_tHDFSOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	
		int tos_count_tHadoopConfManager_tHDFSOutput_1 = 0;
		



String libPath_tHadoopConfManager_tHDFSOutput_1 = "";


class DealJobLibrary_tHadoopConfManager_tHDFSOutput_1 {

    public String getConfJarName(String confLib, String extraId) {
        String confJarName = confLib;
        if (extraId != null && extraId.length() > 0) {
            String jarName = confLib.substring(0, confLib.lastIndexOf("."));
            String jarExt = confLib.substring(confLib.lastIndexOf("."));
            confJarName = jarName + "_" + extraId + jarExt;
        }
        return confJarName;
    }

    public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
        String classPathLine = "";
        String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
        if (isNeedAddLibsPath( crcMapPath)) {
            java.util.Map<String, String> crcMap = null;
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath));
            crcMap = (java.util.Map<String, String>) ois.readObject();
            ois.close();
            classPathLine = addLibsPath(originalClassPathLine, crcMap);
        } else {
            classPathLine = originalClassPathLine;
        }
        return classPathLine;
    }

    private boolean isNeedAddLibsPath(String crcMapPath) {
        if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
            return false;
        }
        return true;
    }


    private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
        for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
            line = adaptLibPaths(line, entry);
        }
        return line;
    }

    private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
        String jarName = entry.getValue();
        String crc = entry.getKey();
        String libStringFinder = "../lib/" + jarName;
        if (line.contains(libStringFinder)) {
            line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
        } else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
            line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
        } else if (line.contains(";" + jarName + ";")) {
            line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
        }
        return line;
    }

}

DealJobLibrary_tHadoopConfManager_tHDFSOutput_1 dealJobLibrary = new DealJobLibrary_tHadoopConfManager_tHDFSOutput_1();
String confJarName = dealJobLibrary.getConfJarName("hadoop-conf-CHU_Cluster.jar", this.contextStr);

    libPath_tHadoopConfManager_tHDFSOutput_1 = new java.io.File("C:/TOS_BD-20200219_1130-V7.3.1/workspace/CHU/temp/lib/" + confJarName).getAbsolutePath();
libPath_tHadoopConfManager_tHDFSOutput_1 = dealJobLibrary.replaceJarPathsFromCrcMap(libPath_tHadoopConfManager_tHDFSOutput_1);

java.net.URLClassLoader currentLoadertHadoopConfManager_tHDFSOutput_1 = (java.net.URLClassLoader) Thread.currentThread().getContextClassLoader();
java.lang.reflect.Method method_tHadoopConfManager_tHDFSOutput_1 = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
method_tHadoopConfManager_tHDFSOutput_1.setAccessible(true);
method_tHadoopConfManager_tHDFSOutput_1.invoke(currentLoadertHadoopConfManager_tHDFSOutput_1, new Object[] { new java.io.File(libPath_tHadoopConfManager_tHDFSOutput_1).toURL() });


 



/**
 * [tHadoopConfManager_tHDFSOutput_1 begin ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	

 


	tos_count_tHadoopConfManager_tHDFSOutput_1++;

/**
 * [tHadoopConfManager_tHDFSOutput_1 main ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	

 



/**
 * [tHadoopConfManager_tHDFSOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	

 



/**
 * [tHadoopConfManager_tHDFSOutput_1 process_data_end ] stop
 */
	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	

 

ok_Hash.put("tHadoopConfManager_tHDFSOutput_1", true);
end_Hash.put("tHadoopConfManager_tHDFSOutput_1", System.currentTimeMillis());




/**
 * [tHadoopConfManager_tHDFSOutput_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHadoopConfManager_tHDFSOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHadoopConfManager_tHDFSOutput_1";

	

 



/**
 * [tHadoopConfManager_tHDFSOutput_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHadoopConfManager_tHDFSOutput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Fact_Satisfaction Fact_SatisfactionClass = new Fact_Satisfaction();

        int exitCode = Fact_SatisfactionClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Fact_Satisfaction.class.getClassLoader().getResourceAsStream("chu/fact_satisfaction_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Fact_Satisfaction.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("HDFS_Cluster_User", "id_String");
                            context.HDFS_Cluster_User=(String) context.getProperty("HDFS_Cluster_User");
                        context.setContextType("HDFS_Cluster_hadoopConfSpecificJar", "id_String");
                            context.HDFS_Cluster_hadoopConfSpecificJar=(String) context.getProperty("HDFS_Cluster_hadoopConfSpecificJar");
                        context.setContextType("HDFS_Cluster_NameNodeUri", "id_String");
                            context.HDFS_Cluster_NameNodeUri=(String) context.getProperty("HDFS_Cluster_NameNodeUri");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("HDFS_Cluster_User")) {
                context.HDFS_Cluster_User = (String) parentContextMap.get("HDFS_Cluster_User");
            }if (parentContextMap.containsKey("HDFS_Cluster_hadoopConfSpecificJar")) {
                context.HDFS_Cluster_hadoopConfSpecificJar = (String) parentContextMap.get("HDFS_Cluster_hadoopConfSpecificJar");
            }if (parentContextMap.containsKey("HDFS_Cluster_NameNodeUri")) {
                context.HDFS_Cluster_NameNodeUri = (String) parentContextMap.get("HDFS_Cluster_NameNodeUri");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


try {
errorCode = null;tHadoopConfManager_tHDFSConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHadoopConfManager_tHDFSConnection_1) {
globalMap.put("tHadoopConfManager_tHDFSConnection_1_SUBPROCESS_STATE", -1);

e_tHadoopConfManager_tHDFSConnection_1.printStackTrace();

}


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tHDFSConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHDFSConnection_1) {
globalMap.put("tHDFSConnection_1_SUBPROCESS_STATE", -1);

e_tHDFSConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Fact_Satisfaction");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     273674 characters generated by Talend Open Studio for Big Data 
 *     on the 12 mai 2022 13:42:21 CEST
 ************************************************************************************************/